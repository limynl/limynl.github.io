<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Limynl</title>
  
  <subtitle>一枚不断努力的小白</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://limynl.site/"/>
  <updated>2018-04-03T12:11:30.358Z</updated>
  <id>http://limynl.site/</id>
  
  <author>
    <name>Limynl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常见排序算法总结</title>
    <link href="http://limynl.site/2018/04/03/common-sorting-summary/"/>
    <id>http://limynl.site/2018/04/03/common-sorting-summary/</id>
    <published>2018-04-03T12:09:21.000Z</published>
    <updated>2018-04-03T12:11:30.358Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>排序是数据处理中经常使用的一种操作，其主要目的是便于查找。根据不同角度，可以对排序进行分类，例如是否建立在关键码比较的基础上，将排序方法分为基于比较的排序和不基于比较的排序。这里根据基于比较的排序方法，大致分为插入排序、交换排序、选择排序、归并排序等四类，其主要就是通过关键码之间的比较和记录的移动这两种操作来实现的。</p><a id="more"></a><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><strong>主要思想</strong>：每次将一个待排序的记录按其关键码的大小插入到一个已经排好序的有序序列中，直到全部记录排好序。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>依次将待排序序列中的每一个记录插入到一个已排好序的序列中，直到全部记录排好序。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><blockquote><ol><li><p>将整个待排序的记录序列划分为有序区和无序区，初始时有序区为待排序记录中的第一个记录，无序区 包括所有剩余待排序的记录;</p></li><li><p>将无序区的第一个记录插入到有序区的合适位置，从而使有序区减少一个记录，有序区增加一个记录;</p></li><li><p>重复步骤2，直到无序区没有记录为止。</p></li></ol></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 直接插入排序</span><br><span class="line"> * @param arr 待排序的数组序列</span><br><span class="line"> */</span><br><span class="line">public static void insertSort(int arr[])&#123;</span><br><span class="line">    int temp = 0;</span><br><span class="line">    for(int i = 1; i &lt;= arr.length - 1; i++)&#123;</span><br><span class="line">        //暂存带插入记录</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        int j = 0;</span><br><span class="line">        //寻找插入位置</span><br><span class="line">        for(j = i - 1; temp &lt; arr[j]; j--)&#123;</span><br><span class="line">            //记录后移</span><br><span class="line">            arr[j + 1] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + 1] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ol><li><p>直接插入排序是一种稳定的排序方法；</p></li><li><p>当序列中的记录基本有序或者待排序记录较少是，它是最佳的排序方法；</p></li><li><p>当待排序中的记录个数较多时，记录将会进行大量的比较和移动，此时性能较差。</p></li></ol></blockquote><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>它是对直接插入排序的一种改进，先将整个待排序记录序列分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列基本有序时，再对全体记录进行一次直接插入排序。</p><h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><blockquote><ol><li><p>假设待排序的记录为n个，先取整数d &lt; n，将所有相距为d的记录构成一组，从而将整个待排序记录序列分割成d个子序列；</p></li><li><p>对每个子序列分别进行直接插入排序；</p></li><li><p>缩小间隔d，重复上述过程，直到最后d=1。</p></li></ol></blockquote><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 希尔排序</span><br><span class="line"> * @param arr 待排序的数组序列</span><br><span class="line"> */</span><br><span class="line">public static void shellSort(int arr[])&#123;</span><br><span class="line">    //暂存待插入记录</span><br><span class="line">    int key = 0;</span><br><span class="line">    //对增量d进行划分，直到d=1为止</span><br><span class="line">    for(int d = arr.length / 2; d &gt;= 1; d = d / 2)&#123;</span><br><span class="line">        //在整个序列中，前d个记录分别是d个子序列中的第一个记录，所以从(d + 1)个位置开始进行插入</span><br><span class="line">        for(int i = d + 1; i &lt;= arr.length - 1; i++)&#123;</span><br><span class="line">            key = arr[i];</span><br><span class="line">            int j = 0;</span><br><span class="line">            //对每个子序列进行直接插入排序，因为每个子序列中记录之间的间隔为d，因此每次插入时向前跳跃d个位置</span><br><span class="line">            for(j = i - d; j &gt; 0 &amp;&amp; key &lt; arr[j]; j = j - d)&#123;</span><br><span class="line">                arr[j + d] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + d] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><ol><li><p>希尔排序是一种不稳定的排序方法；</p></li><li><p>对于增量d的设计，要使得最后一个增量必须等于1，即将所有记录放到一组进行一次直接插入排序，从而使得最终的所有记录均按关键码有序排列。</p></li></ol></blockquote><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><p><strong>主要思想</strong>：在待排序序列中选两个记录，将它们进行比较，如果反序则交换它们的位置。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;排序是数据处理中经常使用的一种操作，其主要目的是便于查找。根据不同角度，可以对排序进行分类，例如是否建立在关键码比较的基础上，将排序方法分为基于比较的排序和不基于比较的排序。这里根据基于比较的排序方法，大致分为插入排序、交换排序、选择排序、归并排序等四类，其主要就是通过关键码之间的比较和记录的移动这两种操作来实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://limynl.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://limynl.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>详解AVL树</title>
    <link href="http://limynl.site/2018/03/30/detailed-explanation-avl/"/>
    <id>http://limynl.site/2018/03/30/detailed-explanation-avl/</id>
    <published>2018-03-30T09:26:11.000Z</published>
    <updated>2018-03-30T10:19:35.388Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在BST树中，查找性能在O(logn)~O(n)之间，如果该树为右斜树，则查找效率为O(n)，其查找效率取决于二叉查找树的形态，而构造一颗均匀的二叉查找树与结点插入的次序有关，因此需要找到一种动态平衡的方法，对于任意给定的关键码序列都能构造一颗形态均匀的、平衡的二叉查找树，即AVL树(平衡二叉查找树)<br><a id="more"></a></p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="AVL树特点"><a href="#AVL树特点" class="headerlink" title="AVL树特点"></a>AVL树特点</h3><ul><li>AVL树是一颗二叉查找树，任一个根节点的左节点小于根节点，右节点大于根节点</li><li>根节点的右子树和左子树的深度最多相差1<blockquote><p>说明：<br>  &nbsp;&nbsp;&nbsp;&nbsp;1、这里规定空二叉树的深度为0;<br>  &nbsp;&nbsp;&nbsp;&nbsp;2、节点的层数为1，树的深度为所有结点的最大层数。</p></blockquote></li></ul><h3 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h3><ul><li>节点的平衡因子是该节点左子树的深度与右子树的深度之差</li><li>在AVL树中，任一节点的平衡因子的绝对值&lt;=1时，该树是平衡的，否则不是平衡的</li></ul><h3 id="最小不平衡子树"><a href="#最小不平衡子树" class="headerlink" title="最小不平衡子树"></a>最小不平衡子树</h3><ul><li>在平衡二叉树的构造过程中，以距离插入节点最近的且平衡因子的绝对值大于1的节点为根的子树</li></ul><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>在构造AVL树或者对AVL树进行插入、删除节点时，可能导致AVL树失去平衡(即某节点的平衡因子的绝对值大于1)，导致AVL树失衡概括起来共有4种情况：LL(左左)、LR(左右)、RR(右右)、RL(右左)，如下图所示。但是通过旋转能使其恢复平衡。<br><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL1.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><h3 id="LL型"><a href="#LL型" class="headerlink" title="LL型"></a>LL型</h3><h4 id="调整过程"><a href="#调整过程" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL2.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的左子树的左子树还有非空子节点，导致根节点k2的平衡因子为2，此时AVL树不平衡。可以通过一次左旋转让AVL树恢复平衡。如上图所示，以k2为起点绕k1顺时针旋转，但是k2与k1的右子树Y冲突，此时以旋转优先，使k2为k1的右子树，Y为k2的左子树。此时该AVL树就恢复平衡了。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * LL：左左对应的情况——左单旋转</span><br><span class="line"> * @param k2 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; leftLeftRotation(AVLTreeNode&lt;T&gt; k2)&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt; k1;</span><br><span class="line"></span><br><span class="line">    //调整各节点的左右子树</span><br><span class="line">    k1 = k2.leftNode;</span><br><span class="line">    k2.leftNode = k1.rightNode;</span><br><span class="line">    k1.rightNode = k2;</span><br><span class="line"></span><br><span class="line">    //更新相应结点的层数，+1的原因就是空二叉树的深度为0</span><br><span class="line">    k2.height = max(getNodeHeight(k2.leftNode), getNodeHeight(k2.rightNode)) + 1;</span><br><span class="line">    k1.height = max(getNodeHeight(k1.leftNode), k2.height) + 1;</span><br><span class="line"></span><br><span class="line">    return k1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RR型"><a href="#RR型" class="headerlink" title="RR型"></a>RR型</h3><h4 id="调整过程-1"><a href="#调整过程-1" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL3.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的右子树的右子树还有非空子节点，导致根节点k1的平衡因子为-2，此时AVL树不平衡。可以通过一次右旋转让AVL树恢复平衡。如上图所示，以k1为起点绕k2逆时针旋转，但是k1与k2的左子树Y冲突，此时以旋转优先，使k1为k2的左子树，Y为k1的右子树。此时该AVL树就恢复平衡了。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * RR：右右对应的情况——右单旋转</span><br><span class="line"> * @param k1 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转之后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; rightRightRotation(AVLTreeNode&lt;T&gt; k1)&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt; k2;</span><br><span class="line"></span><br><span class="line">    //调整相应结点的左右子树</span><br><span class="line">    k2 = k1.rightNode;</span><br><span class="line">    k1.rightNode = k2.leftNode;</span><br><span class="line">    k2.leftNode = k1;</span><br><span class="line"></span><br><span class="line">    //更新相应结点的层数</span><br><span class="line">    k1.height = max(getNodeHeight(k1.leftNode), getNodeHeight(k1.rightNode)) + 1;</span><br><span class="line">    k2.height = max(getNodeHeight(k2.rightNode), k1.height) + 1;</span><br><span class="line">    return k2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LR型"><a href="#LR型" class="headerlink" title="LR型"></a>LR型</h3><h4 id="调整过程-2"><a href="#调整过程-2" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL4.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的左子树的右子树还有非空子节点，导致根节点k3的平衡因子为2，此时该AVL树不平衡。可以通过右左双旋转让AVL树恢复平衡。如上图所示，第一次旋转：以k1为起点绕k2逆时针旋转，但是k1与k2的左子树Y冲突，此时以旋转优先，使k1为k2的左子树，Y为k1的右子树，此时应该告知树的其余部分该变化，因此k3的左子树为k2。第二次旋转：经过第一次的旋转，可以发现此时该AVL树符合LL的情况，因此以k3为起点绕k2顺时针旋转，但是k3与k2的右子树Z冲突，以旋转优先，使k3为k2的右子树，Z为k3的左子树。此时该AVL树就恢复平衡了。<br><strong>总结</strong>：该种情况其实就是经过两个旋转即可完成，第一次对k1进行RR旋转，第二次对k3进行LL旋转</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * LR：左右对应的情况(左双旋转)</span><br><span class="line"> * @param k3 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转之后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; leftRightRotation(AVLTreeNode&lt;T&gt; k3)&#123;</span><br><span class="line">    //对k1进行RR旋转，将旋转之后的根节点k2成为k3的左子树</span><br><span class="line">    k3.leftNode = rightRightRotation(k3.leftNode);</span><br><span class="line">    //对k3进行LL旋转</span><br><span class="line">    return leftLeftRotation(k3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RL型"><a href="#RL型" class="headerlink" title="RL型"></a>RL型</h3><h4 id="调整过程-3"><a href="#调整过程-3" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL5.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的左子树的右子树还有非空子节点，导致根节点k1的平衡因子为-2，此时该AVL树不平衡。可以通过左右双旋转让AVL树恢复平衡。如上图所示，第一次旋转：以k3为起点绕k2顺时针旋转，但是k3与k2的左子树Z冲突，此时以旋转优先，使k3为k2的左子树，Z为k3的右子树，此时应该告知树的其余部分该变化，因此k1的右子树为k2。第二次旋转：经过第一次的旋转，可以发现此时该AVL树符合RR的情况，因此以k1为起点绕k2逆时针旋转，但是k1与k2的左子树Y冲突，以旋转优先，使k1为k2的左子树，Y为k1的右子树。此时该AVL树就是平衡的了。<br><strong>总结</strong>：该种情况其实就是经过两个旋转即可完成，第一次对k3进行LL旋转，第二次对k1进行RR旋转</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * RL：右左对应的情况(右双旋转)</span><br><span class="line"> * @param k1 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转之后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; rightLeftRotation(AVLTreeNode&lt;T&gt; k1)&#123;</span><br><span class="line">    //对k3进行RR旋转，将旋转之后的根节点k2成为k1的右子树</span><br><span class="line">    k1.rightNode = leftLeftRotation(k1.rightNode);</span><br><span class="line">    //直接对k1进行RR旋转</span><br><span class="line">    return rightRightRotation(k1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：在旋转过程中由于旋转引起的局部变化，应该通知树的其余部分该变化。例如，在RL情况的第一次旋转中就应该通知k1改变它的右子树的指向，由原先指向k3改为现在的k2，如果忘记这一点的话，那么树的结构将会被破坏，即k1的右子树就不可访问了。</p></blockquote><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><blockquote><p>完整的代码后文将会一并给出</p></blockquote><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>有了前面几种情况的讨论，那么AVL树中节点的插入，无非就是插入节点后，对相应的情况进行处理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将节点插入AVL树中，并返回根节点</span><br><span class="line"> * @param rootNode AVL树的根节点</span><br><span class="line"> * @param value 即将插入节点的数据域</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; insertNode(AVLTreeNode&lt;T&gt; rootNode, T value)&#123;</span><br><span class="line">    //AVL树根节点为空</span><br><span class="line">    if(rootNode == null)&#123;</span><br><span class="line">        rootNode = new AVLTreeNode&lt;T&gt;(value);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int result = value.compareTo(rootNode.value);</span><br><span class="line">        if(result &lt; 0)&#123;</span><br><span class="line">            //将待插入节点插到rootNode的左子树上</span><br><span class="line">            rootNode.leftNode = insertNode(rootNode.leftNode, value);</span><br><span class="line">            //插入节点后，若AVL树失去平衡，则进行相应的调节</span><br><span class="line">            if(getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2)&#123;</span><br><span class="line">                if(value.compareTo(rootNode.leftNode.value) &lt; 0)&#123;</span><br><span class="line">                    //LL对应的情况，进行左单旋转</span><br><span class="line">                    rootNode = leftLeftRotation(rootNode);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //LR对应的情况，进行左双旋转</span><br><span class="line">                    rootNode = leftRightRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(result &gt; 0)&#123;</span><br><span class="line">            //将待插入节点插到rootNode的右子树上</span><br><span class="line">            rootNode.rightNode = insertNode(rootNode.rightNode, value);</span><br><span class="line">            //插入节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">            if(getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2)&#123;</span><br><span class="line">                if(value.compareTo(rootNode.rightNode.value) &gt; 0)&#123;</span><br><span class="line">                    //RR对应的情况，进行右单旋转</span><br><span class="line">                    rootNode = rightRightRotation(rootNode);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //RL对应的情况，进行右双旋转</span><br><span class="line">                    rootNode = rightLeftRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;插入失败，不允许添加两个相同的节点！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rootNode.height = max(getNodeHeight(rootNode.leftNode), getNodeHeight(rootNode.rightNode)) + 1;</span><br><span class="line">    return rootNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除AVL树上的一个节点</span><br><span class="line"> * @param rootNode 根节点</span><br><span class="line"> * @param z    待删除节点</span><br><span class="line"> * @return 跟节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; deleteNode(AVLTreeNode&lt;T&gt; rootNode, AVLTreeNode&lt;T&gt; z) &#123;</span><br><span class="line">    //根节点为空</span><br><span class="line">    if (rootNode == null || z == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    int result = z.value.compareTo(rootNode.value);</span><br><span class="line">    if (result &lt; 0) &#123;</span><br><span class="line">        //待删除的节点在rootNode的左子树中</span><br><span class="line">        rootNode.leftNode = deleteNode(rootNode.leftNode, z);</span><br><span class="line">        //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">        if (getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2) &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; r = rootNode.rightNode;</span><br><span class="line">            if (getNodeHeight(r.leftNode) &gt; getNodeHeight(r.rightNode)) &#123;</span><br><span class="line">                rootNode = rightLeftRotation(rootNode);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                rootNode = rightRightRotation(rootNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (result &gt; 0) &#123;</span><br><span class="line">        //待删除的节点在rootNode的右子树中</span><br><span class="line">        rootNode.rightNode = deleteNode(rootNode.rightNode, z);</span><br><span class="line">        //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">        if (getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2) &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; l = rootNode.leftNode;</span><br><span class="line">            if (getNodeHeight(l.rightNode) &gt; getNodeHeight(l.leftNode)) &#123;</span><br><span class="line">                rootNode = leftRightRotation(rootNode);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                rootNode = leftLeftRotation(rootNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        // tree的左右孩子都非空</span><br><span class="line">        if ((rootNode.leftNode != null) &amp;&amp; (rootNode.rightNode != null)) &#123;</span><br><span class="line">            if (getNodeHeight(rootNode.leftNode) &gt; getNodeHeight(rootNode.rightNode)) &#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; max = maxNode(rootNode.leftNode);</span><br><span class="line">                rootNode.value = max.value;</span><br><span class="line">                rootNode.leftNode = deleteNode(rootNode.leftNode, max);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; min = maxNode(rootNode.rightNode);</span><br><span class="line">                rootNode.value = min.value;</span><br><span class="line">                rootNode.rightNode = deleteNode(rootNode.rightNode, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            rootNode = (rootNode.leftNode != null) ? rootNode.leftNode : rootNode.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return rootNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整源代码"><a href="#完整源代码" class="headerlink" title="完整源代码"></a>完整源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line">public class AVLTree&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    public AVLTree() &#123;</span><br><span class="line">        root = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取节点的高度</span><br><span class="line">     * 说明：</span><br><span class="line">     * 1、空二叉树的深度为0</span><br><span class="line">     * 2、根节点的层数为1，树的深度为所有结点的最大层数</span><br><span class="line">     */</span><br><span class="line">    private int getNodeHeight(AVLTreeNode&lt;T&gt; treeNode) &#123;</span><br><span class="line">        if (treeNode == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return treeNode.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取根节点的高度</span><br><span class="line">     */</span><br><span class="line">    public int height() &#123;</span><br><span class="line">        return getNodeHeight(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 比较两个值的大小</span><br><span class="line">     */</span><br><span class="line">    private int max(int a, int b) &#123;</span><br><span class="line">        return a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * LL：左左对应的情况——左单旋转</span><br><span class="line">     *</span><br><span class="line">     * @param k2 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; leftLeftRotation(AVLTreeNode&lt;T&gt; k2) &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; k1;</span><br><span class="line"></span><br><span class="line">        //将k2的左子树暂存</span><br><span class="line">        k1 = k2.leftNode;</span><br><span class="line">        k2.leftNode = k1.rightNode;</span><br><span class="line">        k1.rightNode = k2;</span><br><span class="line"></span><br><span class="line">        //更新相应结点的层数</span><br><span class="line">        k2.height = max(getNodeHeight(k2.leftNode), getNodeHeight(k2.rightNode)) + 1;</span><br><span class="line">        k1.height = max(getNodeHeight(k1.leftNode), k2.height) + 1;</span><br><span class="line"></span><br><span class="line">        return k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RR：右右对应的情况——右单旋转</span><br><span class="line">     *</span><br><span class="line">     * @param k1 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转之后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; rightRightRotation(AVLTreeNode&lt;T&gt; k1) &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; k2;</span><br><span class="line"></span><br><span class="line">        k2 = k1.rightNode;</span><br><span class="line">        k1.rightNode = k2.leftNode;</span><br><span class="line">        k2.leftNode = k1;</span><br><span class="line"></span><br><span class="line">        //更新相应结点的层数</span><br><span class="line">        k1.height = max(getNodeHeight(k1.leftNode), getNodeHeight(k1.rightNode)) + 1;</span><br><span class="line">        k2.height = max(getNodeHeight(k2.rightNode), k1.height) + 1;</span><br><span class="line">        return k2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * LR：左右对应的情况(左双旋转)</span><br><span class="line">     *</span><br><span class="line">     * @param k3 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转之后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; leftRightRotation(AVLTreeNode&lt;T&gt; k3) &#123;</span><br><span class="line">        //对k1进行RR旋转，将旋转之后的根节点k2成为k3的左子树</span><br><span class="line">        k3.leftNode = rightRightRotation(k3.leftNode);</span><br><span class="line">        //对k3进行LL旋转</span><br><span class="line">        return leftLeftRotation(k3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RL：右左对应的情况(右双旋转)</span><br><span class="line">     *</span><br><span class="line">     * @param k1 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转之后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; rightLeftRotation(AVLTreeNode&lt;T&gt; k1) &#123;</span><br><span class="line">        k1.rightNode = leftLeftRotation(k1.rightNode);</span><br><span class="line">        return rightRightRotation(k1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将节点插入AVL树中，并返回根节点</span><br><span class="line">     *</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @param value    即将插入节点的数据域</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; insertNode(AVLTreeNode&lt;T&gt; rootNode, T value) &#123;</span><br><span class="line">        //AVL树根节点为空</span><br><span class="line">        if (rootNode == null) &#123;</span><br><span class="line">            rootNode = new AVLTreeNode&lt;T&gt;(value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int result = value.compareTo(rootNode.value);</span><br><span class="line">            if (result &lt; 0) &#123;</span><br><span class="line">                //将待插入节点插到rootNode的左子树上</span><br><span class="line">                rootNode.leftNode = insertNode(rootNode.leftNode, value);</span><br><span class="line">                //插入节点后，若AVL树失去平衡，则进行相应的调节</span><br><span class="line">                if (getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2) &#123;</span><br><span class="line">                    if (value.compareTo(rootNode.leftNode.value) &lt; 0) &#123;</span><br><span class="line">                        //LL对应的情况，进行左单旋转</span><br><span class="line">                        rootNode = leftLeftRotation(rootNode);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //LR对应的情况，进行左双旋转</span><br><span class="line">                        rootNode = leftRightRotation(rootNode);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (result &gt; 0) &#123;</span><br><span class="line">                //将待插入节点插到rootNode的右子树上</span><br><span class="line">                rootNode.rightNode = insertNode(rootNode.rightNode, value);</span><br><span class="line">                //插入节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">                if (getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2) &#123;</span><br><span class="line">                    if (value.compareTo(rootNode.rightNode.value) &gt; 0) &#123;</span><br><span class="line">                        //RR对应的情况，进行右单旋转</span><br><span class="line">                        rootNode = rightRightRotation(rootNode);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //RL对应的情况，进行右双旋转</span><br><span class="line">                        rootNode = rightLeftRotation(rootNode);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;插入失败，不允许添加两个相同的节点！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rootNode.height = max(getNodeHeight(rootNode.leftNode), getNodeHeight(rootNode.rightNode)) + 1;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void insertNode(T value) &#123;</span><br><span class="line">        root = insertNode(root, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除AVL树上的一个节点</span><br><span class="line">     *</span><br><span class="line">     * @param rootNode 根节点</span><br><span class="line">     * @param z    待删除节点</span><br><span class="line">     * @return 跟节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; deleteNode(AVLTreeNode&lt;T&gt; rootNode, AVLTreeNode&lt;T&gt; z) &#123;</span><br><span class="line">        //根节点为空</span><br><span class="line">        if (rootNode == null || z == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int result = z.value.compareTo(rootNode.value);</span><br><span class="line">        if (result &lt; 0) &#123;</span><br><span class="line">            //待删除的节点在rootNode的左子树中</span><br><span class="line">            rootNode.leftNode = deleteNode(rootNode.leftNode, z);</span><br><span class="line">            //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">            if (getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2) &#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; r = rootNode.rightNode;</span><br><span class="line">                if (getNodeHeight(r.leftNode) &gt; getNodeHeight(r.rightNode)) &#123;</span><br><span class="line">                    rootNode = rightLeftRotation(rootNode);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    rootNode = rightRightRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (result &gt; 0) &#123;</span><br><span class="line">            //待删除的节点在rootNode的右子树中</span><br><span class="line">            rootNode.rightNode = deleteNode(rootNode.rightNode, z);</span><br><span class="line">            //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">            if (getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2) &#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; l = rootNode.leftNode;</span><br><span class="line">                if (getNodeHeight(l.rightNode) &gt; getNodeHeight(l.leftNode)) &#123;</span><br><span class="line">                    rootNode = leftRightRotation(rootNode);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    rootNode = leftLeftRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // tree的左右孩子都非空</span><br><span class="line">            if ((rootNode.leftNode != null) &amp;&amp; (rootNode.rightNode != null)) &#123;</span><br><span class="line">                if (getNodeHeight(rootNode.leftNode) &gt; getNodeHeight(rootNode.rightNode)) &#123;</span><br><span class="line">                    AVLTreeNode&lt;T&gt; max = maxNode(rootNode.leftNode);</span><br><span class="line">                    rootNode.value = max.value;</span><br><span class="line">                    rootNode.leftNode = deleteNode(rootNode.leftNode, max);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    AVLTreeNode&lt;T&gt; min = maxNode(rootNode.rightNode);</span><br><span class="line">                    rootNode.value = min.value;</span><br><span class="line">                    rootNode.rightNode = deleteNode(rootNode.rightNode, min);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                rootNode = (rootNode.leftNode != null) ? rootNode.leftNode : rootNode.rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deleteNode(T value) &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; node;</span><br><span class="line"></span><br><span class="line">        //查找要删除的节点是否存在</span><br><span class="line">        if ((node = searchNode(root, value)) != null)&#123;</span><br><span class="line">            root = deleteNode(root, node);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;AVL树中不存在该节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找AVL树上的值最大的节点</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; maxNode(AVLTreeNode&lt;T&gt; rootNode) &#123;</span><br><span class="line">        //AVL树不存在</span><br><span class="line">        if (rootNode == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //AVL实质就是二叉查找树，因此最大节点在树的最右边</span><br><span class="line">        while (rootNode.rightNode != null) &#123;</span><br><span class="line">            rootNode = rootNode.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T maxNode()&#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; node = maxNode(root);</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            return node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找AVL树上的值最小的节点</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; minNode(AVLTreeNode&lt;T&gt; rootNode)&#123;</span><br><span class="line">        //AVL树不存在</span><br><span class="line">        if(rootNode == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //AVL树实质上就是二叉查找树，因此最大节点在树的最左边</span><br><span class="line">        while(rootNode.leftNode != null)&#123;</span><br><span class="line">            rootNode = rootNode.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T minNode()&#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; node = minNode(root);</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            return node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找AVL树中指定value的节点</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @param value 要查找节点的value</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; searchNode(AVLTreeNode&lt;T&gt; rootNode, T value)&#123;</span><br><span class="line">        if(rootNode == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int result = value.compareTo(rootNode.value);</span><br><span class="line">        if(result &lt; 0)&#123;</span><br><span class="line">            return searchNode(rootNode.leftNode, value);</span><br><span class="line">        &#125;else if(result &gt; 0)&#123;</span><br><span class="line">            return searchNode(rootNode.rightNode, value);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return rootNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AVLTreeNode&lt;T&gt; searchNode(T value)&#123;</span><br><span class="line">        return searchNode(root, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前序遍历AVL树</span><br><span class="line">     */</span><br><span class="line">    private void preOrder(AVLTreeNode&lt;T&gt; rootNode) &#123;</span><br><span class="line">        if (rootNode == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(rootNode.value + &quot;, &quot;);</span><br><span class="line">        preOrder(rootNode.leftNode);</span><br><span class="line">        preOrder(rootNode.rightNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void preOrder() &#123;</span><br><span class="line">        preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AVL树的节点内部类</span><br><span class="line">     */</span><br><span class="line">    private static class AVLTreeNode&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 节点的数据域</span><br><span class="line">         */</span><br><span class="line">        T value;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 左孩子</span><br><span class="line">         */</span><br><span class="line">        AVLTreeNode&lt;T&gt; leftNode;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 右孩子</span><br><span class="line">         */</span><br><span class="line">        AVLTreeNode&lt;T&gt; rightNode;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 该结点的深度</span><br><span class="line">         */</span><br><span class="line">        int height;</span><br><span class="line"></span><br><span class="line">        public AVLTreeNode(T value) &#123;</span><br><span class="line">            this(value, null, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public AVLTreeNode(T value, AVLTreeNode&lt;T&gt; leftNode, AVLTreeNode&lt;T&gt; rightNode) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.leftNode = leftNode;</span><br><span class="line">            this.rightNode = rightNode;</span><br><span class="line">            this.height = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在BST树中，查找性能在O(logn)~O(n)之间，如果该树为右斜树，则查找效率为O(n)，其查找效率取决于二叉查找树的形态，而构造一颗均匀的二叉查找树与结点插入的次序有关，因此需要找到一种动态平衡的方法，对于任意给定的关键码序列都能构造一颗形态均匀的、平衡的二叉查找树，即AVL树(平衡二叉查找树)&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://limynl.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://limynl.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://limynl.site/2017/12/31/competition-video/"/>
    <id>http://limynl.site/2017/12/31/competition-video/</id>
    <published>2017-12-31T04:35:02.000Z</published>
    <updated>2018-03-15T15:35:42.445Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src=/js/crypto-js.js></script><script>function doDecrypt(pwd, onError) {console.log("in doDecrypt");var txt = document.getElementById("enc_content").innerHTML;var plantext;try {  var bytes = CryptoJS.AES.decrypt(txt, pwd);plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById("enc_content").innerHTML = plaintext;document.getElementById("enc_content").style.display = "block";   document.getElementById("enc_passwd").style.display = "none";}</script><div id="enc_content" style="display:none">U2FsdGVkX19Wr2pDZag4LsmEr7yUGzEs3F9Ho87R9qadPBboooH0V3owfljRjN2n+Bux0tv+HC2kTLTTz9Se0gX5n7FTkJRQe+KtkZtoMAR9ztKpbSnh+6EQvC3HJ45ye2Coz6Lpphlj0gspt23kPaqqeZmlDtzAF6uWwf13cBB/Uuf3iOdi7fwvlfKMqzbsA3H0AvCBuntbXUFVb+KoADtzvk2Yx7o4nEx5NYZI+SNNIXa0xIfLMlrlWk4A/ox5Zxf8UWfOnswTyrFvgu6c+W0rIQarU7a37/T8wNUnhOtglXqNfvbwbSoU/sYZf35dvL8fb5eU/gsMiIEfPBW2tvwMbiGtUzbmApg0lzdCD1B0904Eom1EyknWBAQ8L5IYTyufXci7Qjm3KsF/bVffhsVKovvaoP/3+My4lMyujRIY95cEB08m29UmDFBN6kYlawECuuLyolL0oRbpnR2TYR3rtbYUJbdatsRC+Dizu9IpWigPhkwNR+y3wR6Rm9ijkYeBcIOMUKArnG9Ow8HTHIV88mz6MPPUuYbPTNEArgYsTibxewX6DKLBCv2T6FurpanSUmP/Lu9jfLRpgCX4e8BsptC8kPyhSWVZJv7SWQu+vvotEWwH4XsASdJEYmblRI3CPSDh8NfMXnf4URVIiQOrxP3pjiSDtdYXi7kRBGFQDdc07jknDnJP4z7lg/BVaTm+ypxjdgiOSkWw5+YetBY1gXH50GFSIpEW2IxxPfv4o4R8Y9bwe4Mv9wPdVZfzwDsF+DNX+JRGsH0x2OH4ojv6EkBCRe4LcU8+GEvYHXvuVKfqP1wFhhPdHukHQSiOFYvBJDWnia9yib+/9tW9lO5pK8zZZwz7JqKPsFh64ccVDZ6FId/LRpkc/e7rDhKV4Y63J8X6uu/TAJAIxfFcYZDqoEoglRHBoNZ0y0y3a63mp8xoQX/HmqtW9SA9iPFPAT3ivAcVULINyDfVtqZGkW3qh+S1XoByIWjwAUDV8d41X9HU+8+lHCh+UDNUfKxT6PAQq4EIFikx3WT36xn8O6s24PYyZMHXQpCn0fWifxveTauhTXfyc3RLV/kRov/pMI/kgoX96zP/tbyNDb7cq4mImKKMKDxmSlyTUDdKXpkU5U6VGGbv2N4EnzHG5HBOpDG1+14EKL/bGFYHB55KqMH15vk7BpXNpF2+ZjghDXQnKosUub+I2oerdFcaEuD+vdYLZrS5FxkgpmtTjf68xl2s77otMguqw6hv2oEuYEivLFchao0ckEz2OTEtbN2Ryxim6mmPhtp0m9N7RbJL/YwEt6ObrkU+7a0aCvgfvVo04nSmQkqldj/oUyWowRGDcugWIiZSX/vuo1Q7ZTVOo99ep83XXHyeYQM6N8Lbhh1/BEnwBl/UnX3mBKk608ooyVD/Gr7HBoNaZGp/vPCBYjdt6wdVoNsbGdKELVPVcb2Gl6OvzD0j0I+PD/CBHUhZshMFBeX36IBl0lBs6Cqov4OWUYPHxvmOictG+74eQUkuV6IIUdNJGYRIvF1so7mW8R0inPOuzhH6eOlhY5UPSPVIiW3kv0qrtcCsj2jFgmQUWcMvvZ0UkkEqlCeErHLRnEctHrmTKLBy+ZHwIoVjAPvvjcf6vAEpQ44EfMilQBQ6LpWR0Q8yE+3F/UPdUAxBSjM0M8HkM+HUeBMSrrwAuK60xSYhuIO3E6Qwba/UFF2D5Zt2HlnBzIu0rVw72MgJfTWYr79AkU8oDQjRrN38ssuxkoDMBh4FWhDdraHqwdPi5bJOubHUyestdqgaVSf6YBMW+G7j8cwM4t++8KYWu2Z2vV2GadLRZ+rOISbyUODYUBvIwismTEd6aZ6uyW92tSsfg5vzM8ymph5GawE+lJGTikjJAJTaTNYw/OMcg8BZhehN1SpFGhNGJzgdGgOCPGc/REj4MeProOx5laDm0R/i/PDvbK0GrBGKUk4cc2FgBu8YynABdEPousX4yn8nTCyXHpC5MfXGHdUWQ7wQqLITLbgCYa+V6xJmizti6H4hoqsApPfC1IT692rwY7i+GEiqt3PVqSpIS8ZF1w52Mu1laVygSE/S12RClCMQDrg66+YpJWbxO0AMxJEZkefPyNDsCRBX1G63KKSUqynyO6W6MKSdWIigEE4pLAVfpYG4HcsgtXLAQm92UsOhX8l5ySL9oTo6ENp5T4Y+4jZ6/ZjiGMrURnIagDgNCiIOKTdy1gtvJaQTgcvSCnqqxBoEq20iOcUNim03oSHiLuAoOfU7xbyNvwUI9XQTgOjAWJtwDKIrrPEBM2xWK2jXb8ic+EIFQV1LSv3zQcF5apWh4iM13R9C//1dOQl0EJsFpO+D/OLWHLjwgjAKHe2tb6ph9Myge+oBwfqLVVm6dDiilaplH7+kSgPB5ywwpYUVdWngKZqqbgl0bg+KigVQ3qAIEebJlLS21UE09+eETB7NClEeSGFrc34d88wSipI6cQ4ApA0wTpO4xLX4+61/u8NnU+Z3QkgZYZPRo1TshkODC+USSfsCAwKG29Bk25bNfMNYedpKMyD9LrIvZTxLKOJ0Xur3UL6dngvnjJBYe9ZGzHUWQ+L6VfC2TTwVc5PWLdtV+Pa7ZGSsBhGolrqhY/Ai+JJUYGEsMzUZqw1V259zMQwC3f3ywc5ohPUZqoKYUBj0g5g2WbykHDdQbbaAM7a5n30wTuIowfB6NaPumFwhWLasJqFd9B1SogokSMKi4tdSrwxOhVCmmj/m/7o4ePKO+qQks9ar/aBreyTW1+56/SOEVh8trcmfcwriINmXXCbvsQbIOwGBZnlWUX+cD3P+uowquh3USVF+NWf1ijX+l20DMwzSk8Y01GrS873XFnaUSNIH0zPbuW4f+UJBuugJxLWN7mz2Xv1qkOaY5EwRxaH53sqqh8zJXDCAhQ7O4SC3fD77JAonVfXWu/RoptxE6o5khJGY2gX3NtOr5GUJakTcwk2pGLgYuLBYW+vdbenpXqtaiIjnbeUloCm2AW952T8kca5DtAERb0MpcC0ErIh7XtkIRjmwbMipikvnprFDAdqOECI+Em+UBnzRqgfSTSH17euIq9iZn0sleHgTv9x2j/9BMMCoJUKEOt+L+vR0adF9VOwOpv/UeozaBrTycLH1GbkMt21tl4+4P3Ra44FNXunmqhhZlFSUYzeLNqN4I2dMdKbPn+qeWsaJBytA+r5aEW5gKyzGwCDp20wkNyARoEI+YEIb6P2CTwrOHZluwX1++K3T1+YxBcBFsSN7f9Ra2x41qIN+AbnXgqeOtzeT09uvBzXyOORYX7LmnFlke+Rbvyiafho3RIZsKSnW3fsthszhRyqGTUKvtxzsFGXlMjzib3tZH8fjPoOdaB6ovJtJ6t7EiseZj5uttJH3Q8kw7rQ+Uk5aedvrfez7O3IyB4kbhdbM/s+aMGvk6wa6IdRSp1V3iW5JDDaNCU+t9vxb/gxGKr7aPAMgBOoE1D5oGPrkNUMTUddCYc0/hl27oMi+b7fsKYNIxgqchRI+te+rj1e069qV5bnaAjKFSEBdLESAeE1LeGcLwO1qZXpP6HEN+3mIN+b9KdPUbLcbLgnA1ckBEE/eQMt+zC8RL/dANHO2akA9wOoBQ7XN58v1tUwQ+Q7f+UisET9ZqBL4gFZFNmww8SapNZeM50qOXLk3KOyNFZIM5swqBgc7j7IvxfW7nxBnrGYvLF0yQX2j67+yewl1Us2GdArlo15NG+nC6RD9jsKPp0EK2G3QA6arIXC1b9hf0P2084dl5sY94rplD0TonWMY+0ttPk/0+ikjeMz2DlWlWQ/mksnqizS6rAftPdr6FWdvXNeaSjtcanaAFAyxfJELk4tr5UCh4pqrIkeBYuUsGrr9RuzUp0jdi3j/9rl9hTqU7HjOiBmuus/TyIiorJdhp//xJXgXFk+g6d7M1MfIMmtZIzwSCP01YWbVIfCVBRUXp5HxFYvlqZFWQbc3u8E0IQBCoIUJJNt15pc+c6rnEdZsmjM0TwpSYf0tOQV8vtfnfwT+7UrZ54w1hAF4+zIw2wVzohpvmERp6n75BjhTMba8+/7U3pbsK+1JD4CvRpuhocoePh45S+F1IqUqzAN4+LK/crdVdpx7NI4Ol2/UFOYjExF5KA82CN/AqXhzg//ns0KJlXxlImRFeAd4r1TD0FxoGMQa1/ZgzpaUgyDOgApOqKTpnj6B+zoq4Ak9JvSG1ESVzJjctZ4Yms+KQ0en660IJSGHZ28PsRubVjd5lmRTM1rtvIYb3Ag/YAqGth2nRWrQfr/fXJQcZBeLiY7o1UMLWcPOQg4PFYUijwO40FUn/AbqkZUMqiOOdhbVTQ61SSG4Ae9IhY015nswpDMfX7+Y8sottNPX8hqdG6Dh9FVdYmgO3NalpRoYC9ivGfKo6+ysD/nDLLbx9TOeJoQDBinkOSyvRwjahdu0JlklPQCHqlSyKugsR9qkwjiiculMOc63ClNaenJnvnYaBD1Jv3bWe9hm9cSCGgAjbjavEyEZvQVDm3fTX/v8SF+Jabyg35TNhb7lxIYRtizJP805hZAuIkPklqR8c9+rXfR/coERV7FzWhIhFnybFwl3nmHlIq/Yhx977skhsv8tHjGuXIlvfH06hhZ1Wf47ZVly3gBSep4oV+O8EWdDex85/6GLgcCbNV83n2xr4nfIYzAfVOUQKE65ysXs/lUTscKPJnbAX9bofOlSo/9D9dDNo97yh/K6L8uaQy93L4cHE6LrqDedUoDPhj6bPiG55Run5KYErYPj7pGNOBDrnHrCj7p9MDYWdM+SQYFQkHMNG6qkv7p9NxA1CRLOsABkKSUWM0AslLqbSpWiDEyygpvC22gPsJ6UK5dYrIPV9eQgzVPFep3i3/YbaVVn2mwn2yECQKnNMNJ5jOO5hNBFugc/3j6Yk/NtAY2HR3hW5SR2lsUeS6Bg6iSa9osEll2AnVOb8c7MCbJc8HE4qfrtj8nd0PAqdkxzBFkXJvfo4LYQwFneVFJT9by1g7PLHLLF237aJ+PvN4DVnAsL5q1aFTeRKXviX4OKHbS2dE5rXnO4QOL7e4c5ndO/4I8divWO+R2NyjDzcqleJuCsSLpyHxrQ1LGdzZ+RB0l3akCOiS5Mbshr1QyIt8Wto3K4BmMI3E8WeeuqLnzcggvNvP2uXuOj+C4ksjL+9xQgXjbsOT+TjUquTW9WsbMOCEth1acB225dXGilLKOgQG6mAmJjzmkk08+va+NE6cnJKmcYMI4twWfkoWue7LB5FIHSkrQRkp8vNjIoDy2fK9S+PrjxgYhuxtBlT5AGPk2kdpTfN6kjlUDCkF8RRMxUYZmDK6zIJWTXs1CAabWdhtCxPzhPGfEglJaX4zrlCPfLfVDSSatGxq49gcUrGVHvROKgWDc9Y9sAyRf7TKTbklkmR+YZ8e1NyOtbDQez2ks/uDNQjiRBabItXST0g2PgV2U47pW47jZoNv9mJTpBRboLVrxyRnNhlV/JCzElDeif0bF5a3CoELwESs9tw/btG9KYsMqVx/ZNtaCwubuLDC51rMa4s3rqPOuKKxdlnPjKpiU/WGZMfzywkJ6YJI938OvQrI3AfxK+zLF6YmC1tjJ0qSyyfrFgxcNL8M3tdnASomx3XQUkDed3hyaP/odM2stgUJpFs8fXzO5HTrTTw3PA9YPzjlPp4+9POBgfitzaIHEmeg4EXlMbEqNIC0m0s99bKdHMcOG/9oTn1H+4Kuj1w3k5isrx7UQr3vgAv7y1Spu4iT0At7oHMnfT7wmp7aK0JsQzOwO4dTHivzBjxJXLwR4AE2IEFlp+P6xbgm6Cg4yWgYCZNxSgDvXgrjbLxufkRfkh3xBFthlQeYxcn6Wzf6rPJtUI2SyCL7c/n3OVvS3Pq0mtea2j4s5ruTM/uIo4OrTKW7eHOlAEFYiKR3mPRfKKaIvrURKJcmn/CP+QofQLxjVhduUr7CvkTyHtNMOEPXzc5E7f4VUg2m6OLpb+iILD3TP5zRwfHuGcWRadeHtMneDbM+Bh/OON7E3mkFquMYoVD6rmJgMvAXp60o1Cs9xPbZFviFTJr9vFcShUvTBRuVSLOFYYh2B+kbuaW8esGul7dHu64j3jRARN//Fhpjtsl+5MwS7Nv53XKlXekbCrp4siAh83sMoWr4hZOn8cFyZrvsLB7hLjYR/O8qWlx+WQ+n9Cj+y/6nJu93DnHuXj1gip4oXWX/dPCMPSgZLrHaRKeunxZPCPRHZ9TINKyV2KZ9+0tpZvE+RTC41IEw06FcFVBlIHYsPj1SNP1frKl90MsQcuOjMKgEHP7XwlwdMG8rQHsrfoekvuWtnIenyiKrOOEoKseq4sHapTXp0j8HsdQ16UnAzcTVVFdMUkySPRMhHzd3jW71XTgfm1LjXvx22ytzscRPUoO1/T58W6Zy9Hi7Bp2f1M8b8b2bdo35JT4yzvcyjsn8iU5bQybTtsJwqygS+OLSRr26JcFpXuQ9F93xUwNPENyraDb/PXmbVDi5Gpg06FTm+eKoJx2bdpd2EX0wewCSBVBRmm+RE5hH6azOy2vvDHRaw3hnBdYTYqOV7P7YjS7doqpdTkNIZKRJC5Duy187X2KRHvgNFCuMLIu9OWpUxyNJT/8UiemForUahUv1vBNUlmm5hbwBwZKuexhk0UEtYetgwGheU2VqiRBP2Ujo95HkjoJvFMW6pUl1Y6tW8iW4GuVjUEvxIX5xxOWDWybaWC4MPu5MX3AV+T60OCowpJreSeMUBAzv5B3j9yQw8KA+kBKkfcn/ICNW0Ru5hP+vCgYhgtdlqdTJpbgBv5RH81KNjnT4yUugXFM1/pcZAwwRhMRyCyqNV4m+/WS0k0ITntJllOVn77fpm1hx5aBGxElJUEU3HNQq/MAApESblqlw1H1Pid36UB/d4HAAlJmrnh5Qoa50lFSRMDbZysum2h1sjZxqHjw692wiBNo3IcNQZW6p5vSiFy7Yh/v19VGLsWIYMTzW2HRbGPOi0hR/wPi3bCAtjEOQ476y/O7yx4rPxgFYKgxGUR8NzircrNZ8xArIkVyHqcFM15x1ud4kRNN48m0w7lHyYUs1t6A+2A4xx7qZ6aqesIQHx/bWJJmUuO5yEq89TvWgkz+ZkQUX6KBZuAqyxFt9XXU7HDldMKPQWvSQp2tg+UTgvyAnirTsdCRixfBZztbdyNooN+vnVa5p3vmXu3PEm1asw7IT2addczbCeUGyiPOzebqtlqM3uWYzZA7FsHnQSQfkLAN8ck8h2lQZVL5O7zUF5qc03Lq2D692Xy3U+uzbDLWDh2xF/Ykn+QK8lBLB3x8+nPzOGwY9Ng7pg=</div><div id="enc_passwd"> <div style=" color: #000000; font: large; ">请输入密码：</div> <input type="password" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;"> <input type="submit" value="确认" onclick="decrypt()" style="height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "密码错误，请重新输入!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://limynl.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式(三)之工厂模式</title>
    <link href="http://limynl.site/2017/12/26/design-pattern-factory/"/>
    <id>http://limynl.site/2017/12/26/design-pattern-factory/</id>
    <published>2017-12-26T01:20:46.000Z</published>
    <updated>2017-12-26T08:19:47.460Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/factory_pattern_background.jpeg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工厂模式是Java中最常用的设计模式之一。这种类型的模式属于创建型模式，它提供了一种创建对象的最佳方式，即创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。<br><a id="more"></a></p><h2 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>简单工厂模式又叫静态工厂方法模式，是由一个工厂对象决定创建出哪一种产品类的实例。</p><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/simple_factory_pattern.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><ul><li>Shape：接口，简单工厂模式创建的所有对象都是它的子类，它负责描述所有实例所共有的公共接口；</li><li>Square、Circle、Rectangle：实现类，是简单工厂模式的创建目标；</li><li>ShapeFactory：根据需要，工厂创建具体对象</li><li>FactoryPatternDemo：客户端，发出请求，通知ShapeFactory。</li></ul><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>这里以上面的创建各种图形为例</p><h4 id="创建图形接口"><a href="#创建图形接口" class="headerlink" title="创建图形接口"></a>创建图形接口</h4><p>这里创建一个图形的接口，它有一个绘制图形的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Shape&#123;</span><br><span class="line">    void draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建具体的图形类"><a href="#创建具体的图形类" class="headerlink" title="创建具体的图形类"></a>创建具体的图形类</h4><p>这里创建各个具体的图形，它们都实现接口Shape，并实现其方法draw()</p><p><strong>正方形(Square)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Square implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw()&#123;</span><br><span class="line">        System.out.println(&quot;画正方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>圆(Circle)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw()&#123;</span><br><span class="line">        System.out.println(&quot;画圆&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>长方形(Rectangle)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Rectangle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw()&#123;</span><br><span class="line">        System.out.println(&quot;画长方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建工厂"><a href="#创建工厂" class="headerlink" title="创建工厂"></a>创建工厂</h4><p>接下来创建一个工厂ShapeFactory，他提供一个静态方法createShape用来绘制图形。只要你传入你想绘制的图形，它就会生成相应图形的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ShapeFactory&#123;</span><br><span class="line">   public static Shape createShape(String type)&#123;</span><br><span class="line">       Shape shape = null;</span><br><span class="line">       switch(type)&#123;</span><br><span class="line">           case &quot;Square&quot;:&#123;</span><br><span class="line">               shape = new Square();</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">           case &quot;Circle&quot;:&#123;</span><br><span class="line">               shape = new Circle();</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">           case &quot;Rectangle&quot;:&#123;</span><br><span class="line">               shape = new Rectangle();</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">       &#125;</span><br><span class="line">       return shape;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>接着客户端调用工厂，传入你想绘制的图形，调用绘制图形的方法，就可绘制出你想要的图形。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class FactoryPatternDemo&#123;</span><br><span class="line">    public static void main(String args)&#123;</span><br><span class="line">        Shape square = ShapeFactory.createShape(&quot;Square&quot;);</span><br><span class="line">        square.draw();</span><br><span class="line">        </span><br><span class="line">        Shape circle = ShapeFactory.createShape(&quot;Circle&quot;);</span><br><span class="line">        circle.draw();</span><br><span class="line">        </span><br><span class="line">        Shape rectangle = ShapeFactory.createShape(&quot;Rectangle&quot;);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">画正方形</span><br><span class="line">画圆</span><br><span class="line">画长方形</span><br></pre></td></tr></table></figure></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>我们明确地计划不同条件下创建不同实例时；</li><li>客户只知道传入工厂类的参数对于如何创建对象(逻辑)不关心。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>一个调用者像创建一个具体的对象，只要知道其名称就可以了；</li><li>扩展性高，如果想增加一个具体的产品，只要扩展一个工厂类就行了，同时屏蔽了产品的具体实现。</li></ul><p><strong>缺点：</strong></p><ul><li>如果增加新类型，使得系统中类的个数也会成倍增加，增加了系统的复杂性，同时也需要修改工厂，违背了开放封闭原则。因此下面的工厂模式将对其进一步优化。</li></ul><h2 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。    </p><blockquote><p>注：工厂模式与简单工厂模式很相似，工厂模式中使用反射机制，弥补简单工厂模式中每次增加一个产品时，都需要增加一个对象实现工厂的缺点。即就是每增加一个类型，都需要修改工厂。</p></blockquote><h3 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h3><p>工厂模式的结构图跟简单工厂模式的结构图差不多，唯一不同的就是ShapeFactory中实现的逻辑不一样罢了。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>这里图形接口、各个具体的实现类跟上面的一样，因此我们只看ShapeFactory的实现方式：</p><h4 id="创建工厂-1"><a href="#创建工厂-1" class="headerlink" title="创建工厂"></a>创建工厂</h4><p>创建一个工厂ShapeFactory，它还是提供一个静态方法createShape用来绘制图形，但是传入的参数和实现逻辑与简单工厂模式略有不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ShapeFactory&#123;</span><br><span class="line">    public static &lt;T extends Shape&gt; T createShape(Class&lt;T&gt; clz)&#123;</span><br><span class="line">        Shape shape = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            shape = (Shape)Class.forName(clz.getName()).newInstance();</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return (T)shape;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class FactoryPatternDemo&#123;</span><br><span class="line">    public static void main(String args)&#123;</span><br><span class="line">        Square square = ShapeFactory.createShape(Square.class);</span><br><span class="line">square.draw();</span><br><span class="line"></span><br><span class="line">Circle circle = ShapeFactory.createShape(Circle.class);</span><br><span class="line">circle.draw();</span><br><span class="line"></span><br><span class="line">Rectangle rect = ShapeFactory.createShape(Rectangle.class);</span><br><span class="line">rect.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">画正方形</span><br><span class="line">画圆</span><br><span class="line">画长方形</span><br></pre></td></tr></table></figure></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>同简单工厂模式相比较，可以看出，如果需要增加一个类型，先创建一个实现工厂接口的子类，然后在客户端调用即可，而不用再去修改工厂的内部逻辑。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从简单工厂模式中我们可以知道，工厂类中包含了必要的逻辑判断，根据不同的条件来动态实例化相关的类，对客户端来说，如果我们要增加一个产品，那我们就需要在工厂类中添加一个case分支条件，显然这违背了开放封闭原则，即对修改也开放了。而工厂模式就很好地解决了这个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p0w1t27p0.bkt.clouddn.com/limynl/site/factory_pattern_background.jpeg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工厂模式是Java中最常用的设计模式之一。这种类型的模式属于创建型模式，它提供了一种创建对象的最佳方式，即创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://limynl.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://limynl.site/tags/Java/"/>
    
      <category term="设计模式" scheme="http://limynl.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>String之间的那点儿事</title>
    <link href="http://limynl.site/2017/12/24/string-detail-introduce/"/>
    <id>http://limynl.site/2017/12/24/string-detail-introduce/</id>
    <published>2017-12-24T04:04:07.000Z</published>
    <updated>2017-12-27T01:11:41.976Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/string_detail_introduce_background.jpeg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前了解了String、StringBuilder和StringBuffer之间简单的区别，比如String是不可变的，StringBuilder是可变的，StringBuffer是线程安全的等，但对于它们为什么有这些特性却完全蒙蔽，知其然不知其所以然，因此下面将结合最近掌握的，对它们进行详细总结。<br><a id="more"></a></p><h2 id="三者关系"><a href="#三者关系" class="headerlink" title="三者关系"></a>三者关系</h2><p>为了更好的理解这三者的关系，下面是它们的关系图：<br><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/String_relation.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><p>从图中可以看出它们都是从CharSequence (<em>是一个接口，表示char值的一个可读序列，此接口对许多不同种类的char序列提供统一的读写访问</em>)扩展而来，<strong>同时String、StringBuilder和StringBuffer的本质都是通过字符数组实现的。</strong></p><h2 id="String详解"><a href="#String详解" class="headerlink" title="String详解"></a>String详解</h2><h3 id="常见创建方式"><a href="#常见创建方式" class="headerlink" title="常见创建方式"></a>常见创建方式</h3><ul><li>方式一：使用关键字new，如：String s1 = new String(“Hello World”);</li><li>方式二：直接定义，如：String s2 = “Hello World”;</li></ul><blockquote><p>当然通过构造函数创建一个String还有很多其他方式，这里就以参数为String的为例</p></blockquote><p>下面通过简单的内存分析图，说明这两种方式的区别：<br><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/sit/String_inner_analysis.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>因此从上面可以看出使用方式一，内存为其分配了两个对象，至于常量池中”Hello World”为什么是一个对象，这就要更深层次的分析了，这里就不做过多的解释；而方式二只创建了一个对象。 因此这里就得出了平时的结论：<br>&emsp;&emsp;1、当需要创建String字符串时，推荐使用方式二的形式，因为使用方式一增大堆内存的消耗；<br>&emsp;&emsp;2、它们之间的“==”关系：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class TestString&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String str1 = new String(<span class="string">"Hello World"</span>);</span><br><span class="line">        String str2 = <span class="string">"Hello World"</span>;</span><br><span class="line">        System.out.println(str1 == str2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;当然结果为：false，因为str1、str2不是引用的同一个对象。<br>&emsp;&emsp;3、从图中可以看出String的内部通过char[] value进行管理的，因此String的本质是字符数组。</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public final class String</span><br><span class="line">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br></pre></td></tr></table></figure><ul><li>String被final修饰，说明该类不能被继承；</li><li>实现Serializable，说明可以序列化和反序列化；</li><li>实现Comparable，说明可以进行自定义的字符串比较；</li><li>实现CharSequence，说明利用CharSequence可以实现读写方式。</li></ul><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>源码中可以看见这样一个成员变量：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//存储字符串中元素的字符数组</span><br><span class="line">private final char value[];</span><br></pre></td></tr></table></figure></p><ul><li>该成员变量是一个字符数组表明，String的本质就是一个字符数组，通过这个字符数组来存储字符内容；</li><li>该字符数组被final修饰，而且value是引用变量，因此可以知道一旦被初始化，即指向内存中一个数组，就不能再指向别的数组了；</li><li>看到这里我们就可以得出结论：<strong>String是不可变的！</strong><br><strong>注意：String不可变是指其内容不能被修改，但是其引用还是可以指向其他内容。</strong>   </li></ul><p>&emsp;&emsp;比如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String s3 = <span class="string">"abc"</span>;</span><br><span class="line">String s4 = <span class="string">"def"</span>;</span><br><span class="line">s3 = s4;</span><br><span class="line">System.out.println(s3);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;因此输出结果为：def</p><p>&emsp;&emsp;这里拿图说话 ☟：<br><img src="http://p0w1t27p0.bkt.clouddn.com/String_not_change.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>&emsp;&emsp;因此从图可知，s3的原来所引用的对象内容确实没有改变，改变的仅仅是s3引用的对象。   </p><p>&emsp;&emsp;⊙(・◇・)？   思考：s3所引用的对象内容到底可不可改变<br>&emsp;&emsp;&emsp;&emsp;我们都知道对象引用，引用的是对象的地址，它根本就不知道对象的实际内容，因此如果String类中如果提供一个可以修改value字符串数组内容的方法，那么String就变成可修改的了，因此实际上String没有这么一个方法。实际上也不应该提供这么一个方法，否则String类就没有意义了。</p><h4 id="常用方法介绍"><a href="#常用方法介绍" class="headerlink" title="常用方法介绍"></a>常用方法介绍</h4><p>上面详细介绍了String类的特性，下面对其几个常用方法进行简要分析，以此对String类的相关特性进一步了解：</p><h5 id="1、构造方法："><a href="#1、构造方法：" class="headerlink" title="1、构造方法："></a>1、构造方法：</h5><p>&emsp;&emsp;(1)、无参构造函数：会创建一个空的字符序列，因为字符串是不可变的，所以没必要使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public <span class="function"><span class="title">String</span></span>() &#123;</span><br><span class="line">    this.value = new char[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;(2)、String为参数的构造函数：这个构造方法会产生两个字符串对象，用来初始化一个和输入参数具有相同字符序列的字符串对象，换句话说，新建的这个字符串对象是传入的字符串参数对象的一份副本，除非是明确地需要使用字符串复制功能，否则由于字符串常量值是不可变的，这个构造函数是没有必要使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public String(String original) &#123;</span><br><span class="line">    this.value = original.value;</span><br><span class="line">    this.hash = original.hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;(3)、将传入的字符数组复制到一个新的字符数组，并将当前对象的value(即this.value)指向它。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public String(char value[]) &#123;</span><br><span class="line">    this.value = Arrays.copyOf(value, value.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String(char value[], int offset, int count) &#123;</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">    this.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;(4)、使用字节数组创建字符串，同时还可以使用指定的解码方式进行解码。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public String(byte bytes[])</span><br><span class="line">public String(byte bytes[], int offset, int length) // 从offset开始，长度为length 并以默认的 ISO-8859-1 编码转换成字符串</span><br><span class="line">public String(byte bytes[], Charset charset)</span><br><span class="line">public String(byte bytes[], String charsetName)</span><br><span class="line">public String(byte bytes[], int offset, int length, Charset charset)</span><br><span class="line">public String(byte bytes[], int offset, int length, String charsetName)</span><br></pre></td></tr></table></figure><h5 id="2、常用方法："><a href="#2、常用方法：" class="headerlink" title="2、常用方法："></a>2、常用方法：</h5><p>&emsp;&emsp;(1)、字符串截取，创建了一个新数组，因此牺牲了一定的空间性能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public String substring(int beginIndex, int endIndex) &#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (endIndex &gt; value.length) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    int subLen = endIndex - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; 0) &#123;</span><br><span class="line">        throw new StringIndexOutOfBoundsException(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this</span><br><span class="line">            : new String(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;(2)、比较两个字符串，可以看出是比较的一个一个字符内容，因此两个相同字符串内容的String对象比较，都是true<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (this == anObject) &#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject instanceof String) &#123;</span><br><span class="line">        String anotherString = (String) anObject;</span><br><span class="line">        int n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            char v1[] = value;</span><br><span class="line">            char v2[] = anotherString.value;</span><br><span class="line">            int i = 0;</span><br><span class="line">            <span class="keyword">while</span> (n-- != 0) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])//对两个字符串中的字符一个一个比较</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>String中还有很多其他方法，具体的自己可以去看看源码，基本上都是字符数组的操作~~~</p><h3 id="扩展：到底创建了几个对象？"><a href="#扩展：到底创建了几个对象？" class="headerlink" title="扩展：到底创建了几个对象？"></a>扩展：到底创建了几个对象？</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>常量池：指的是在编译期被确定，并保存在以编译的.class文件中的一些数据。它包括了关于类、方法、接口等中的==常量==，也包括==字符串常量==。</p><h4 id="情形一"><a href="#情形一" class="headerlink" title="情形一"></a>情形一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">"abc"</span>;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br></pre></td></tr></table></figure><p>上面总共创建了一个对象，由于执行到第一行时常量池中并不存在”abc”，故需要创建一个对象，执行到第二行时，由于常量池中存在”abc”，故直接共享常量池中的内容，因此不会创建对象。</p><h4 id="情形二"><a href="#情形二" class="headerlink" title="情形二"></a>情形二</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String <span class="built_in">test</span> = <span class="string">"abcdefxyz"</span>;</span><br><span class="line">String s5 = <span class="string">"abc"</span> + <span class="string">"def"</span>;</span><br><span class="line">String s6 = s5 + <span class="string">"xyz"</span>;</span><br><span class="line">System.out.println(<span class="built_in">test</span> == s6);//<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>上面两句代码各创建了几个对象：<br>&emsp;&emsp;(1)、首先对于String s5 = “abc” + “def”; 一般我们会认为创建了两个对象，即”abc”和”def”，其实不然，由于常量的值在编译时执行“+”就被确定了，因此变量s5在编译时就可以确定为”abcdef”，因此实际上只创建了一个对象，其实这里就是Java中String的一种优化。<br>&emsp;&emsp;(2)、对于String s6 = s5 + “xyz”; 由于s5是一个变量，在编译时它的值并不确定，故并不会实现编译优化，因此就会产生两个对象，即”xyz”和”abcdefxyz”。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String <span class="built_in">test</span> = <span class="string">"aaabbb"</span>;</span><br><span class="line">final String s7 = <span class="string">"aaa"</span>;</span><br><span class="line">final String s8 = <span class="string">"bbb"</span>;</span><br><span class="line">String s9 = s7 + s8;</span><br><span class="line">System.out.println(<span class="built_in">test</span> == s9);//<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;(3)、对于上面的String s9 = s7 + s8; 并不产生对象，因为s7、s8均为常量，所以编译时就能确定，编译时就会将常量替换，等同于是s9 = “aaa”+”bbb”，因此不产生新对象。</p><p>结论：    </p><ul><li>使用“+”连接的两个字符串本身就是字面常量字符串时，如果池中存在这样连接后的字符串，则是不会重新创建对象，而是直接引用池中的字符串对象；</li><li>如果“+”连接的两字符串中只要有一个不是字面常量串（即定义过的），是会产生新的字符串对象。</li></ul><h4 id="情形三"><a href="#情形三" class="headerlink" title="情形三"></a>情形三</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//案例一</span><br><span class="line">String s7 = new String(<span class="string">"abc"</span>);</span><br><span class="line"><span class="keyword">for</span>(int i = 0;i &lt; 100;i++)&#123;</span><br><span class="line">    s7 = s7 + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//案例二</span><br><span class="line">String s8 = <span class="string">"def"</span>;</span><br><span class="line"><span class="keyword">for</span>(int i =0;i &lt; 100;i++)&#123;</span><br><span class="line">    s8 = s8 + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;因此从前面我们可以知道案例一情况下，将会产生102个对象；案例二情况下，将会产生101个对象。因此当我们的程序中需要大量的拼接字符串时，应该使用效率更高的StringBuilder。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>从上面可以看出虽然String不可变，但是总有其好处：    </p><ul><li>由于它的不可变特性，当我们传参数时，使用不可变类不需要去考虑谁可能会修改其内部的值，因此相对较安全；</li><li>由于常量池的作用，对个引用变量可以引用同一个字符串实例，避免频繁创建实例的开销。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>由于文章篇幅较长，因此将分两部分介绍，传送☞  ++深度解析StringBuilder和StringBuffer++</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p0w1t27p0.bkt.clouddn.com/limynl/site/string_detail_introduce_background.jpeg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前了解了String、StringBuilder和StringBuffer之间简单的区别，比如String是不可变的，StringBuilder是可变的，StringBuffer是线程安全的等，但对于它们为什么有这些特性却完全蒙蔽，知其然不知其所以然，因此下面将结合最近掌握的，对它们进行详细总结。&lt;br&gt;
    
    </summary>
    
      <category term="Java基础" scheme="http://limynl.site/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java" scheme="http://limynl.site/tags/Java/"/>
    
      <category term="源码" scheme="http://limynl.site/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
