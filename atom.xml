<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Limynl</title>
  
  <subtitle>一枚不断努力的小白</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://limynl.site/"/>
  <updated>2018-05-22T13:44:21.249Z</updated>
  <id>http://limynl.site/</id>
  
  <author>
    <name>Limynl</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>xiongzhanghao</title>
    <link href="http://limynl.site/2018/05/22/xiongzhanghao/"/>
    <id>http://limynl.site/2018/05/22/xiongzhanghao/</id>
    <published>2018-05-22T13:41:15.000Z</published>
    <updated>2018-05-22T13:44:21.249Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="熊掌号的意义"><a href="#熊掌号的意义" class="headerlink" title="熊掌号的意义"></a>熊掌号的意义</h2><p>百度熊掌号是内容和服务提供者入驻百度生态的实名账号，致力于帮助内容和服务提供者方便、快捷、高效地连接百度用户，并充分利用搜索生态开放的优势，获得流量和沉淀用户，实现自身价值的快速增长。</p><h2 id="熊掌号的目的："><a href="#熊掌号的目的：" class="headerlink" title="熊掌号的目的："></a>熊掌号的目的：</h2><p>1、建站开发流程繁杂，推广营销成本高；<br>2、互联网平台分散，站长需要同时维护多个平台，各平台的用户不能互通，运营成本较高；<br>3、传统的搜索仅能获取流量，无法有效留存并运营用户；同时将搜索时代由PC向移动转变，从站长角度发展搜索生态。</p><h2 id="熊掌号的作用："><a href="#熊掌号的作用：" class="headerlink" title="熊掌号的作用："></a>熊掌号的作用：</h2><h3 id="1、为资源方带来的收益："><a href="#1、为资源方带来的收益：" class="headerlink" title="1、为资源方带来的收益："></a>1、为资源方带来的收益：</h3><h4 id="①、品牌赋能："><a href="#①、品牌赋能：" class="headerlink" title="①、品牌赋能："></a>①、品牌赋能：</h4><p>资源方可以将优质内容及服务全部提交到熊掌号，统一用户端品牌认知。同时，在搜索引擎上的各个地方，熊掌号的主页、搜索结果页、第三方落地页都强调合作方品牌。熊掌号支持将官网、百家号、官方APP、官方微博等全部内容和服务链接到熊掌号，有利于用户对品牌认知的统一。例如展示内容提供者的名称、Logo等。</p><h4 id="②、流量赋能："><a href="#②、流量赋能：" class="headerlink" title="②、流量赋能："></a>②、流量赋能：</h4><p>通过熊掌号，百度启动了全新的搜索资源索引、排序机制和全新的阿拉丁开放机制，这种新的流量分发机制，使内容资源更加开放。例如，为用户推荐相关的其他内容，引导用户。</p><h4 id="③、运营赋能："><a href="#③、运营赋能：" class="headerlink" title="③、运营赋能："></a>③、运营赋能：</h4><p>从用户沉淀到粉丝积累、再到营销变现，熊掌号将形成完整的闭环生态，为内容和服务提供者带来更多种的粉丝互动手段和更多元的营销推广模式。例如，关注熊掌号，与内容提供者进行发送消息、互动等。</p><h4 id="④、技术赋能："><a href="#④、技术赋能：" class="headerlink" title="④、技术赋能："></a>④、技术赋能：</h4><p>基于熊掌号，百度将开放能力给资源方，帮助资源方提升自身服务转化率。如账号登录、支付能力、运营能力、端能力、AI能力等。</p><h3 id="2、为搜索用户带来的收益："><a href="#2、为搜索用户带来的收益：" class="headerlink" title="2、为搜索用户带来的收益："></a>2、为搜索用户带来的收益：</h3><p>①、用户在百度获得的内容将更加丰富多彩；<br>②、多种方式保证用户权益不受侵害；<br>③、满足了用户对优质资源内容、服务的持续性需求。</p><h2 id="熊掌号的发展："><a href="#熊掌号的发展：" class="headerlink" title="熊掌号的发展："></a>熊掌号的发展：</h2><p>百度通过熊掌号将用户和资源提供者进行结合，使用户和账号运营者之间产生关联进而实现营销的目的，帮助内容和服务提供者获得更多的流量和用户，改变整个搜索生态的模式，相信百度在这条路上会越走越远。用科技让复杂的世界变得更简单，这是百度的新愿景，相信熊掌号必将开启搜索新时代。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h2 id=&quot;熊掌号的意义&quot;&gt;&lt;a href=&quot;#熊掌号的意义&quot; class=&quot;headerlink&quot; title=&quot;熊掌号的意义&quot;&gt;&lt;/a&gt;熊掌号的意义&lt;/h2&gt;&lt;p&gt;百度熊掌
      
    
    </summary>
    
      <category term="Git" scheme="http://limynl.site/categories/Git/"/>
    
    
      <category term="Github" scheme="http://limynl.site/tags/Github/"/>
    
      <category term="Hexo" scheme="http://limynl.site/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法总结</title>
    <link href="http://limynl.site/2018/04/03/common-sorting-summary/"/>
    <id>http://limynl.site/2018/04/03/common-sorting-summary/</id>
    <published>2018-04-03T12:09:21.000Z</published>
    <updated>2018-04-03T12:11:30.358Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>排序是数据处理中经常使用的一种操作，其主要目的是便于查找。根据不同角度，可以对排序进行分类，例如是否建立在关键码比较的基础上，将排序方法分为基于比较的排序和不基于比较的排序。这里根据基于比较的排序方法，大致分为插入排序、交换排序、选择排序、归并排序等四类，其主要就是通过关键码之间的比较和记录的移动这两种操作来实现的。</p><a id="more"></a><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><strong>主要思想</strong>：每次将一个待排序的记录按其关键码的大小插入到一个已经排好序的有序序列中，直到全部记录排好序。</p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>依次将待排序序列中的每一个记录插入到一个已排好序的序列中，直到全部记录排好序。</p><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><blockquote><ol><li><p>将整个待排序的记录序列划分为有序区和无序区，初始时有序区为待排序记录中的第一个记录，无序区 包括所有剩余待排序的记录;</p></li><li><p>将无序区的第一个记录插入到有序区的合适位置，从而使有序区减少一个记录，有序区增加一个记录;</p></li><li><p>重复步骤2，直到无序区没有记录为止。</p></li></ol></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 直接插入排序</span><br><span class="line"> * @param arr 待排序的数组序列</span><br><span class="line"> */</span><br><span class="line">public static void insertSort(int arr[])&#123;</span><br><span class="line">    int temp = 0;</span><br><span class="line">    for(int i = 1; i &lt;= arr.length - 1; i++)&#123;</span><br><span class="line">        //暂存带插入记录</span><br><span class="line">        temp = arr[i];</span><br><span class="line">        int j = 0;</span><br><span class="line">        //寻找插入位置</span><br><span class="line">        for(j = i - 1; temp &lt; arr[j]; j--)&#123;</span><br><span class="line">            //记录后移</span><br><span class="line">            arr[j + 1] = arr[j];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j + 1] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote><ol><li><p>直接插入排序是一种稳定的排序方法；</p></li><li><p>当序列中的记录基本有序或者待排序记录较少是，它是最佳的排序方法；</p></li><li><p>当待排序中的记录个数较多时，记录将会进行大量的比较和移动，此时性能较差。</p></li></ol></blockquote><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p>它是对直接插入排序的一种改进，先将整个待排序记录序列分割成若干个子序列，在子序列内分别进行直接插入排序，待整个序列基本有序时，再对全体记录进行一次直接插入排序。</p><h4 id="实现过程-1"><a href="#实现过程-1" class="headerlink" title="实现过程"></a>实现过程</h4><blockquote><ol><li><p>假设待排序的记录为n个，先取整数d &lt; n，将所有相距为d的记录构成一组，从而将整个待排序记录序列分割成d个子序列；</p></li><li><p>对每个子序列分别进行直接插入排序；</p></li><li><p>缩小间隔d，重复上述过程，直到最后d=1。</p></li></ol></blockquote><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 希尔排序</span><br><span class="line"> * @param arr 待排序的数组序列</span><br><span class="line"> */</span><br><span class="line">public static void shellSort(int arr[])&#123;</span><br><span class="line">    //暂存待插入记录</span><br><span class="line">    int key = 0;</span><br><span class="line">    //对增量d进行划分，直到d=1为止</span><br><span class="line">    for(int d = arr.length / 2; d &gt;= 1; d = d / 2)&#123;</span><br><span class="line">        //在整个序列中，前d个记录分别是d个子序列中的第一个记录，所以从(d + 1)个位置开始进行插入</span><br><span class="line">        for(int i = d + 1; i &lt;= arr.length - 1; i++)&#123;</span><br><span class="line">            key = arr[i];</span><br><span class="line">            int j = 0;</span><br><span class="line">            //对每个子序列进行直接插入排序，因为每个子序列中记录之间的间隔为d，因此每次插入时向前跳跃d个位置</span><br><span class="line">            for(j = i - d; j &gt; 0 &amp;&amp; key &lt; arr[j]; j = j - d)&#123;</span><br><span class="line">                arr[j + d] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + d] = key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><ol><li><p>希尔排序是一种不稳定的排序方法；</p></li><li><p>对于增量d的设计，要使得最后一个增量必须等于1，即将所有记录放到一组进行一次直接插入排序，从而使得最终的所有记录均按关键码有序排列。</p></li></ol></blockquote><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><p><strong>主要思想</strong>：在待排序序列中选两个记录，将它们进行比较，如果反序则交换它们的位置。</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;排序是数据处理中经常使用的一种操作，其主要目的是便于查找。根据不同角度，可以对排序进行分类，例如是否建立在关键码比较的基础上，将排序方法分为基于比较的排序和不基于比较的排序。这里根据基于比较的排序方法，大致分为插入排序、交换排序、选择排序、归并排序等四类，其主要就是通过关键码之间的比较和记录的移动这两种操作来实现的。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://limynl.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://limynl.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>详解AVL树</title>
    <link href="http://limynl.site/2018/03/30/detailed-explanation-avl/"/>
    <id>http://limynl.site/2018/03/30/detailed-explanation-avl/</id>
    <published>2018-03-30T09:26:11.000Z</published>
    <updated>2018-03-30T10:19:35.388Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在BST树中，查找性能在O(logn)~O(n)之间，如果该树为右斜树，则查找效率为O(n)，其查找效率取决于二叉查找树的形态，而构造一颗均匀的二叉查找树与结点插入的次序有关，因此需要找到一种动态平衡的方法，对于任意给定的关键码序列都能构造一颗形态均匀的、平衡的二叉查找树，即AVL树(平衡二叉查找树)<br><a id="more"></a></p><h2 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h2><h3 id="AVL树特点"><a href="#AVL树特点" class="headerlink" title="AVL树特点"></a>AVL树特点</h3><ul><li>AVL树是一颗二叉查找树，任一个根节点的左节点小于根节点，右节点大于根节点</li><li>根节点的右子树和左子树的深度最多相差1<blockquote><p>说明：<br>  &nbsp;&nbsp;&nbsp;&nbsp;1、这里规定空二叉树的深度为0;<br>  &nbsp;&nbsp;&nbsp;&nbsp;2、节点的层数为1，树的深度为所有结点的最大层数。</p></blockquote></li></ul><h3 id="平衡因子"><a href="#平衡因子" class="headerlink" title="平衡因子"></a>平衡因子</h3><ul><li>节点的平衡因子是该节点左子树的深度与右子树的深度之差</li><li>在AVL树中，任一节点的平衡因子的绝对值&lt;=1时，该树是平衡的，否则不是平衡的</li></ul><h3 id="最小不平衡子树"><a href="#最小不平衡子树" class="headerlink" title="最小不平衡子树"></a>最小不平衡子树</h3><ul><li>在平衡二叉树的构造过程中，以距离插入节点最近的且平衡因子的绝对值大于1的节点为根的子树</li></ul><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>在构造AVL树或者对AVL树进行插入、删除节点时，可能导致AVL树失去平衡(即某节点的平衡因子的绝对值大于1)，导致AVL树失衡概括起来共有4种情况：LL(左左)、LR(左右)、RR(右右)、RL(右左)，如下图所示。但是通过旋转能使其恢复平衡。<br><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL1.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><h3 id="LL型"><a href="#LL型" class="headerlink" title="LL型"></a>LL型</h3><h4 id="调整过程"><a href="#调整过程" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL2.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的左子树的左子树还有非空子节点，导致根节点k2的平衡因子为2，此时AVL树不平衡。可以通过一次左旋转让AVL树恢复平衡。如上图所示，以k2为起点绕k1顺时针旋转，但是k2与k1的右子树Y冲突，此时以旋转优先，使k2为k1的右子树，Y为k2的左子树。此时该AVL树就恢复平衡了。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * LL：左左对应的情况——左单旋转</span><br><span class="line"> * @param k2 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; leftLeftRotation(AVLTreeNode&lt;T&gt; k2)&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt; k1;</span><br><span class="line"></span><br><span class="line">    //调整各节点的左右子树</span><br><span class="line">    k1 = k2.leftNode;</span><br><span class="line">    k2.leftNode = k1.rightNode;</span><br><span class="line">    k1.rightNode = k2;</span><br><span class="line"></span><br><span class="line">    //更新相应结点的层数，+1的原因就是空二叉树的深度为0</span><br><span class="line">    k2.height = max(getNodeHeight(k2.leftNode), getNodeHeight(k2.rightNode)) + 1;</span><br><span class="line">    k1.height = max(getNodeHeight(k1.leftNode), k2.height) + 1;</span><br><span class="line"></span><br><span class="line">    return k1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RR型"><a href="#RR型" class="headerlink" title="RR型"></a>RR型</h3><h4 id="调整过程-1"><a href="#调整过程-1" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL3.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的右子树的右子树还有非空子节点，导致根节点k1的平衡因子为-2，此时AVL树不平衡。可以通过一次右旋转让AVL树恢复平衡。如上图所示，以k1为起点绕k2逆时针旋转，但是k1与k2的左子树Y冲突，此时以旋转优先，使k1为k2的左子树，Y为k1的右子树。此时该AVL树就恢复平衡了。</p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * RR：右右对应的情况——右单旋转</span><br><span class="line"> * @param k1 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转之后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; rightRightRotation(AVLTreeNode&lt;T&gt; k1)&#123;</span><br><span class="line">    AVLTreeNode&lt;T&gt; k2;</span><br><span class="line"></span><br><span class="line">    //调整相应结点的左右子树</span><br><span class="line">    k2 = k1.rightNode;</span><br><span class="line">    k1.rightNode = k2.leftNode;</span><br><span class="line">    k2.leftNode = k1;</span><br><span class="line"></span><br><span class="line">    //更新相应结点的层数</span><br><span class="line">    k1.height = max(getNodeHeight(k1.leftNode), getNodeHeight(k1.rightNode)) + 1;</span><br><span class="line">    k2.height = max(getNodeHeight(k2.rightNode), k1.height) + 1;</span><br><span class="line">    return k2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LR型"><a href="#LR型" class="headerlink" title="LR型"></a>LR型</h3><h4 id="调整过程-2"><a href="#调整过程-2" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL4.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的左子树的右子树还有非空子节点，导致根节点k3的平衡因子为2，此时该AVL树不平衡。可以通过右左双旋转让AVL树恢复平衡。如上图所示，第一次旋转：以k1为起点绕k2逆时针旋转，但是k1与k2的左子树Y冲突，此时以旋转优先，使k1为k2的左子树，Y为k1的右子树，此时应该告知树的其余部分该变化，因此k3的左子树为k2。第二次旋转：经过第一次的旋转，可以发现此时该AVL树符合LL的情况，因此以k3为起点绕k2顺时针旋转，但是k3与k2的右子树Z冲突，以旋转优先，使k3为k2的右子树，Z为k3的左子树。此时该AVL树就恢复平衡了。<br><strong>总结</strong>：该种情况其实就是经过两个旋转即可完成，第一次对k1进行RR旋转，第二次对k3进行LL旋转</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * LR：左右对应的情况(左双旋转)</span><br><span class="line"> * @param k3 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转之后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; leftRightRotation(AVLTreeNode&lt;T&gt; k3)&#123;</span><br><span class="line">    //对k1进行RR旋转，将旋转之后的根节点k2成为k3的左子树</span><br><span class="line">    k3.leftNode = rightRightRotation(k3.leftNode);</span><br><span class="line">    //对k3进行LL旋转</span><br><span class="line">    return leftLeftRotation(k3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RL型"><a href="#RL型" class="headerlink" title="RL型"></a>RL型</h3><h4 id="调整过程-3"><a href="#调整过程-3" class="headerlink" title="调整过程"></a>调整过程</h4><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/AVL5.jpg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/IzAwMDAwMA==/dissolve/100/gravity/SouthEast/dx/10/dy/8|imageslim" alt=""></p><p>插入或删除一个节点后，根节点的左子树的右子树还有非空子节点，导致根节点k1的平衡因子为-2，此时该AVL树不平衡。可以通过左右双旋转让AVL树恢复平衡。如上图所示，第一次旋转：以k3为起点绕k2顺时针旋转，但是k3与k2的左子树Z冲突，此时以旋转优先，使k3为k2的左子树，Z为k3的右子树，此时应该告知树的其余部分该变化，因此k1的右子树为k2。第二次旋转：经过第一次的旋转，可以发现此时该AVL树符合RR的情况，因此以k1为起点绕k2逆时针旋转，但是k1与k2的左子树Y冲突，以旋转优先，使k1为k2的左子树，Y为k1的右子树。此时该AVL树就是平衡的了。<br><strong>总结</strong>：该种情况其实就是经过两个旋转即可完成，第一次对k3进行LL旋转，第二次对k1进行RR旋转</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * RL：右左对应的情况(右双旋转)</span><br><span class="line"> * @param k1 最小不平衡子树的根节点</span><br><span class="line"> * @return 旋转之后的根节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; rightLeftRotation(AVLTreeNode&lt;T&gt; k1)&#123;</span><br><span class="line">    //对k3进行RR旋转，将旋转之后的根节点k2成为k1的右子树</span><br><span class="line">    k1.rightNode = leftLeftRotation(k1.rightNode);</span><br><span class="line">    //直接对k1进行RR旋转</span><br><span class="line">    return rightRightRotation(k1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：在旋转过程中由于旋转引起的局部变化，应该通知树的其余部分该变化。例如，在RL情况的第一次旋转中就应该通知k1改变它的右子树的指向，由原先指向k3改为现在的k2，如果忘记这一点的话，那么树的结构将会被破坏，即k1的右子树就不可访问了。</p></blockquote><h2 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h2><blockquote><p>完整的代码后文将会一并给出</p></blockquote><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>有了前面几种情况的讨论，那么AVL树中节点的插入，无非就是插入节点后，对相应的情况进行处理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 将节点插入AVL树中，并返回根节点</span><br><span class="line"> * @param rootNode AVL树的根节点</span><br><span class="line"> * @param value 即将插入节点的数据域</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; insertNode(AVLTreeNode&lt;T&gt; rootNode, T value)&#123;</span><br><span class="line">    //AVL树根节点为空</span><br><span class="line">    if(rootNode == null)&#123;</span><br><span class="line">        rootNode = new AVLTreeNode&lt;T&gt;(value);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int result = value.compareTo(rootNode.value);</span><br><span class="line">        if(result &lt; 0)&#123;</span><br><span class="line">            //将待插入节点插到rootNode的左子树上</span><br><span class="line">            rootNode.leftNode = insertNode(rootNode.leftNode, value);</span><br><span class="line">            //插入节点后，若AVL树失去平衡，则进行相应的调节</span><br><span class="line">            if(getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2)&#123;</span><br><span class="line">                if(value.compareTo(rootNode.leftNode.value) &lt; 0)&#123;</span><br><span class="line">                    //LL对应的情况，进行左单旋转</span><br><span class="line">                    rootNode = leftLeftRotation(rootNode);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //LR对应的情况，进行左双旋转</span><br><span class="line">                    rootNode = leftRightRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else if(result &gt; 0)&#123;</span><br><span class="line">            //将待插入节点插到rootNode的右子树上</span><br><span class="line">            rootNode.rightNode = insertNode(rootNode.rightNode, value);</span><br><span class="line">            //插入节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">            if(getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2)&#123;</span><br><span class="line">                if(value.compareTo(rootNode.rightNode.value) &gt; 0)&#123;</span><br><span class="line">                    //RR对应的情况，进行右单旋转</span><br><span class="line">                    rootNode = rightRightRotation(rootNode);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //RL对应的情况，进行右双旋转</span><br><span class="line">                    rootNode = rightLeftRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;插入失败，不允许添加两个相同的节点！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rootNode.height = max(getNodeHeight(rootNode.leftNode), getNodeHeight(rootNode.rightNode)) + 1;</span><br><span class="line">    return rootNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 删除AVL树上的一个节点</span><br><span class="line"> * @param rootNode 根节点</span><br><span class="line"> * @param z    待删除节点</span><br><span class="line"> * @return 跟节点</span><br><span class="line"> */</span><br><span class="line">private AVLTreeNode&lt;T&gt; deleteNode(AVLTreeNode&lt;T&gt; rootNode, AVLTreeNode&lt;T&gt; z) &#123;</span><br><span class="line">    //根节点为空</span><br><span class="line">    if (rootNode == null || z == null) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    int result = z.value.compareTo(rootNode.value);</span><br><span class="line">    if (result &lt; 0) &#123;</span><br><span class="line">        //待删除的节点在rootNode的左子树中</span><br><span class="line">        rootNode.leftNode = deleteNode(rootNode.leftNode, z);</span><br><span class="line">        //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">        if (getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2) &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; r = rootNode.rightNode;</span><br><span class="line">            if (getNodeHeight(r.leftNode) &gt; getNodeHeight(r.rightNode)) &#123;</span><br><span class="line">                rootNode = rightLeftRotation(rootNode);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                rootNode = rightRightRotation(rootNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else if (result &gt; 0) &#123;</span><br><span class="line">        //待删除的节点在rootNode的右子树中</span><br><span class="line">        rootNode.rightNode = deleteNode(rootNode.rightNode, z);</span><br><span class="line">        //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">        if (getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2) &#123;</span><br><span class="line">            AVLTreeNode&lt;T&gt; l = rootNode.leftNode;</span><br><span class="line">            if (getNodeHeight(l.rightNode) &gt; getNodeHeight(l.leftNode)) &#123;</span><br><span class="line">                rootNode = leftRightRotation(rootNode);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                rootNode = leftLeftRotation(rootNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123; </span><br><span class="line">        // tree的左右孩子都非空</span><br><span class="line">        if ((rootNode.leftNode != null) &amp;&amp; (rootNode.rightNode != null)) &#123;</span><br><span class="line">            if (getNodeHeight(rootNode.leftNode) &gt; getNodeHeight(rootNode.rightNode)) &#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; max = maxNode(rootNode.leftNode);</span><br><span class="line">                rootNode.value = max.value;</span><br><span class="line">                rootNode.leftNode = deleteNode(rootNode.leftNode, max);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; min = maxNode(rootNode.rightNode);</span><br><span class="line">                rootNode.value = min.value;</span><br><span class="line">                rootNode.rightNode = deleteNode(rootNode.rightNode, min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            rootNode = (rootNode.leftNode != null) ? rootNode.leftNode : rootNode.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return rootNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整源代码"><a href="#完整源代码" class="headerlink" title="完整源代码"></a>完整源代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line">public class AVLTree&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    public AVLTree() &#123;</span><br><span class="line">        root = null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取节点的高度</span><br><span class="line">     * 说明：</span><br><span class="line">     * 1、空二叉树的深度为0</span><br><span class="line">     * 2、根节点的层数为1，树的深度为所有结点的最大层数</span><br><span class="line">     */</span><br><span class="line">    private int getNodeHeight(AVLTreeNode&lt;T&gt; treeNode) &#123;</span><br><span class="line">        if (treeNode == null) &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        return treeNode.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取根节点的高度</span><br><span class="line">     */</span><br><span class="line">    public int height() &#123;</span><br><span class="line">        return getNodeHeight(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 比较两个值的大小</span><br><span class="line">     */</span><br><span class="line">    private int max(int a, int b) &#123;</span><br><span class="line">        return a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * LL：左左对应的情况——左单旋转</span><br><span class="line">     *</span><br><span class="line">     * @param k2 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; leftLeftRotation(AVLTreeNode&lt;T&gt; k2) &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; k1;</span><br><span class="line"></span><br><span class="line">        //将k2的左子树暂存</span><br><span class="line">        k1 = k2.leftNode;</span><br><span class="line">        k2.leftNode = k1.rightNode;</span><br><span class="line">        k1.rightNode = k2;</span><br><span class="line"></span><br><span class="line">        //更新相应结点的层数</span><br><span class="line">        k2.height = max(getNodeHeight(k2.leftNode), getNodeHeight(k2.rightNode)) + 1;</span><br><span class="line">        k1.height = max(getNodeHeight(k1.leftNode), k2.height) + 1;</span><br><span class="line"></span><br><span class="line">        return k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RR：右右对应的情况——右单旋转</span><br><span class="line">     *</span><br><span class="line">     * @param k1 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转之后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; rightRightRotation(AVLTreeNode&lt;T&gt; k1) &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; k2;</span><br><span class="line"></span><br><span class="line">        k2 = k1.rightNode;</span><br><span class="line">        k1.rightNode = k2.leftNode;</span><br><span class="line">        k2.leftNode = k1;</span><br><span class="line"></span><br><span class="line">        //更新相应结点的层数</span><br><span class="line">        k1.height = max(getNodeHeight(k1.leftNode), getNodeHeight(k1.rightNode)) + 1;</span><br><span class="line">        k2.height = max(getNodeHeight(k2.rightNode), k1.height) + 1;</span><br><span class="line">        return k2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * LR：左右对应的情况(左双旋转)</span><br><span class="line">     *</span><br><span class="line">     * @param k3 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转之后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; leftRightRotation(AVLTreeNode&lt;T&gt; k3) &#123;</span><br><span class="line">        //对k1进行RR旋转，将旋转之后的根节点k2成为k3的左子树</span><br><span class="line">        k3.leftNode = rightRightRotation(k3.leftNode);</span><br><span class="line">        //对k3进行LL旋转</span><br><span class="line">        return leftLeftRotation(k3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * RL：右左对应的情况(右双旋转)</span><br><span class="line">     *</span><br><span class="line">     * @param k1 最小不平衡子树的根节点</span><br><span class="line">     * @return 旋转之后的根节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; rightLeftRotation(AVLTreeNode&lt;T&gt; k1) &#123;</span><br><span class="line">        k1.rightNode = leftLeftRotation(k1.rightNode);</span><br><span class="line">        return rightRightRotation(k1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将节点插入AVL树中，并返回根节点</span><br><span class="line">     *</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @param value    即将插入节点的数据域</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; insertNode(AVLTreeNode&lt;T&gt; rootNode, T value) &#123;</span><br><span class="line">        //AVL树根节点为空</span><br><span class="line">        if (rootNode == null) &#123;</span><br><span class="line">            rootNode = new AVLTreeNode&lt;T&gt;(value);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int result = value.compareTo(rootNode.value);</span><br><span class="line">            if (result &lt; 0) &#123;</span><br><span class="line">                //将待插入节点插到rootNode的左子树上</span><br><span class="line">                rootNode.leftNode = insertNode(rootNode.leftNode, value);</span><br><span class="line">                //插入节点后，若AVL树失去平衡，则进行相应的调节</span><br><span class="line">                if (getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2) &#123;</span><br><span class="line">                    if (value.compareTo(rootNode.leftNode.value) &lt; 0) &#123;</span><br><span class="line">                        //LL对应的情况，进行左单旋转</span><br><span class="line">                        rootNode = leftLeftRotation(rootNode);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //LR对应的情况，进行左双旋转</span><br><span class="line">                        rootNode = leftRightRotation(rootNode);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (result &gt; 0) &#123;</span><br><span class="line">                //将待插入节点插到rootNode的右子树上</span><br><span class="line">                rootNode.rightNode = insertNode(rootNode.rightNode, value);</span><br><span class="line">                //插入节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">                if (getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2) &#123;</span><br><span class="line">                    if (value.compareTo(rootNode.rightNode.value) &gt; 0) &#123;</span><br><span class="line">                        //RR对应的情况，进行右单旋转</span><br><span class="line">                        rootNode = rightRightRotation(rootNode);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        //RL对应的情况，进行右双旋转</span><br><span class="line">                        rootNode = rightLeftRotation(rootNode);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;插入失败，不允许添加两个相同的节点！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rootNode.height = max(getNodeHeight(rootNode.leftNode), getNodeHeight(rootNode.rightNode)) + 1;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void insertNode(T value) &#123;</span><br><span class="line">        root = insertNode(root, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除AVL树上的一个节点</span><br><span class="line">     *</span><br><span class="line">     * @param rootNode 根节点</span><br><span class="line">     * @param z    待删除节点</span><br><span class="line">     * @return 跟节点</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; deleteNode(AVLTreeNode&lt;T&gt; rootNode, AVLTreeNode&lt;T&gt; z) &#123;</span><br><span class="line">        //根节点为空</span><br><span class="line">        if (rootNode == null || z == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int result = z.value.compareTo(rootNode.value);</span><br><span class="line">        if (result &lt; 0) &#123;</span><br><span class="line">            //待删除的节点在rootNode的左子树中</span><br><span class="line">            rootNode.leftNode = deleteNode(rootNode.leftNode, z);</span><br><span class="line">            //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">            if (getNodeHeight(rootNode.rightNode) - getNodeHeight(rootNode.leftNode) == 2) &#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; r = rootNode.rightNode;</span><br><span class="line">                if (getNodeHeight(r.leftNode) &gt; getNodeHeight(r.rightNode)) &#123;</span><br><span class="line">                    rootNode = rightLeftRotation(rootNode);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    rootNode = rightRightRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (result &gt; 0) &#123;</span><br><span class="line">            //待删除的节点在rootNode的右子树中</span><br><span class="line">            rootNode.rightNode = deleteNode(rootNode.rightNode, z);</span><br><span class="line">            //删除节点后，若AVL树失去平衡，则进行相应调节</span><br><span class="line">            if (getNodeHeight(rootNode.leftNode) - getNodeHeight(rootNode.rightNode) == 2) &#123;</span><br><span class="line">                AVLTreeNode&lt;T&gt; l = rootNode.leftNode;</span><br><span class="line">                if (getNodeHeight(l.rightNode) &gt; getNodeHeight(l.leftNode)) &#123;</span><br><span class="line">                    rootNode = leftRightRotation(rootNode);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    rootNode = leftLeftRotation(rootNode);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // tree的左右孩子都非空</span><br><span class="line">            if ((rootNode.leftNode != null) &amp;&amp; (rootNode.rightNode != null)) &#123;</span><br><span class="line">                if (getNodeHeight(rootNode.leftNode) &gt; getNodeHeight(rootNode.rightNode)) &#123;</span><br><span class="line">                    AVLTreeNode&lt;T&gt; max = maxNode(rootNode.leftNode);</span><br><span class="line">                    rootNode.value = max.value;</span><br><span class="line">                    rootNode.leftNode = deleteNode(rootNode.leftNode, max);</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    AVLTreeNode&lt;T&gt; min = maxNode(rootNode.rightNode);</span><br><span class="line">                    rootNode.value = min.value;</span><br><span class="line">                    rootNode.rightNode = deleteNode(rootNode.rightNode, min);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                rootNode = (rootNode.leftNode != null) ? rootNode.leftNode : rootNode.rightNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void deleteNode(T value) &#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; node;</span><br><span class="line"></span><br><span class="line">        //查找要删除的节点是否存在</span><br><span class="line">        if ((node = searchNode(root, value)) != null)&#123;</span><br><span class="line">            root = deleteNode(root, node);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            System.out.println(&quot;AVL树中不存在该节点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找AVL树上的值最大的节点</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; maxNode(AVLTreeNode&lt;T&gt; rootNode) &#123;</span><br><span class="line">        //AVL树不存在</span><br><span class="line">        if (rootNode == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //AVL实质就是二叉查找树，因此最大节点在树的最右边</span><br><span class="line">        while (rootNode.rightNode != null) &#123;</span><br><span class="line">            rootNode = rootNode.rightNode;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T maxNode()&#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; node = maxNode(root);</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            return node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找AVL树上的值最小的节点</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; minNode(AVLTreeNode&lt;T&gt; rootNode)&#123;</span><br><span class="line">        //AVL树不存在</span><br><span class="line">        if(rootNode == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //AVL树实质上就是二叉查找树，因此最大节点在树的最左边</span><br><span class="line">        while(rootNode.leftNode != null)&#123;</span><br><span class="line">            rootNode = rootNode.leftNode;</span><br><span class="line">        &#125;</span><br><span class="line">        return rootNode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T minNode()&#123;</span><br><span class="line">        AVLTreeNode&lt;T&gt; node = minNode(root);</span><br><span class="line">        if(node != null)&#123;</span><br><span class="line">            return node.value;</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查找AVL树中指定value的节点</span><br><span class="line">     * @param rootNode AVL树的根节点</span><br><span class="line">     * @param value 要查找节点的value</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private AVLTreeNode&lt;T&gt; searchNode(AVLTreeNode&lt;T&gt; rootNode, T value)&#123;</span><br><span class="line">        if(rootNode == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        int result = value.compareTo(rootNode.value);</span><br><span class="line">        if(result &lt; 0)&#123;</span><br><span class="line">            return searchNode(rootNode.leftNode, value);</span><br><span class="line">        &#125;else if(result &gt; 0)&#123;</span><br><span class="line">            return searchNode(rootNode.rightNode, value);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return rootNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AVLTreeNode&lt;T&gt; searchNode(T value)&#123;</span><br><span class="line">        return searchNode(root, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 前序遍历AVL树</span><br><span class="line">     */</span><br><span class="line">    private void preOrder(AVLTreeNode&lt;T&gt; rootNode) &#123;</span><br><span class="line">        if (rootNode == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(rootNode.value + &quot;, &quot;);</span><br><span class="line">        preOrder(rootNode.leftNode);</span><br><span class="line">        preOrder(rootNode.rightNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void preOrder() &#123;</span><br><span class="line">        preOrder(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * AVL树的节点内部类</span><br><span class="line">     */</span><br><span class="line">    private static class AVLTreeNode&lt;T extends Comparable&lt;T&gt;&gt; &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 节点的数据域</span><br><span class="line">         */</span><br><span class="line">        T value;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 左孩子</span><br><span class="line">         */</span><br><span class="line">        AVLTreeNode&lt;T&gt; leftNode;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 右孩子</span><br><span class="line">         */</span><br><span class="line">        AVLTreeNode&lt;T&gt; rightNode;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 该结点的深度</span><br><span class="line">         */</span><br><span class="line">        int height;</span><br><span class="line"></span><br><span class="line">        public AVLTreeNode(T value) &#123;</span><br><span class="line">            this(value, null, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public AVLTreeNode(T value, AVLTreeNode&lt;T&gt; leftNode, AVLTreeNode&lt;T&gt; rightNode) &#123;</span><br><span class="line">            this.value = value;</span><br><span class="line">            this.leftNode = leftNode;</span><br><span class="line">            this.rightNode = rightNode;</span><br><span class="line">            this.height = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在BST树中，查找性能在O(logn)~O(n)之间，如果该树为右斜树，则查找效率为O(n)，其查找效率取决于二叉查找树的形态，而构造一颗均匀的二叉查找树与结点插入的次序有关，因此需要找到一种动态平衡的方法，对于任意给定的关键码序列都能构造一颗形态均匀的、平衡的二叉查找树，即AVL树(平衡二叉查找树)&lt;br&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://limynl.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://limynl.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://limynl.site/2017/12/31/competition-video/"/>
    <id>http://limynl.site/2017/12/31/competition-video/</id>
    <published>2017-12-31T04:35:02.000Z</published>
    <updated>2018-03-15T15:35:42.445Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src=/js/crypto-js.js></script><script>function doDecrypt(pwd, onError) {console.log("in doDecrypt");var txt = document.getElementById("enc_content").innerHTML;var plantext;try {  var bytes = CryptoJS.AES.decrypt(txt, pwd);plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById("enc_content").innerHTML = plaintext;document.getElementById("enc_content").style.display = "block";   document.getElementById("enc_passwd").style.display = "none";}</script><div id="enc_content" style="display:none">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</div><div id="enc_passwd"> <div style=" color: #000000; font: large; ">请输入密码：</div> <input type="password" style=" border-radius: 5px; border-style: groove; height: 30px; width: 50%; cursor: auto; font-size: 102%; color: currentColor; outline: none; text-overflow: initial; padding-left: 5px;"> <input type="submit" value="确认" onclick="decrypt()" style="height: 34px; border-radius: 5px; background-color: white; border-style: solid; color: currentColor; ">  <div id="enc_error" style=" display: inline-block; color: #d84527; font: large; "></div> <script>  var onError = function(error) {  $("#enc_error")[0].innerHTML = "密码错误，请重新输入!";  };  function decrypt() {  var passwd = $("#enc_passwd input")[0].value;  doDecrypt(passwd, onError);  }  </script></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span&gt;    &lt;/span&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://limynl.site/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式(三)之工厂模式</title>
    <link href="http://limynl.site/2017/12/26/design-pattern-factory/"/>
    <id>http://limynl.site/2017/12/26/design-pattern-factory/</id>
    <published>2017-12-26T01:20:46.000Z</published>
    <updated>2017-12-26T08:19:47.460Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/site/factory_pattern_background.jpeg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工厂模式是Java中最常用的设计模式之一。这种类型的模式属于创建型模式，它提供了一种创建对象的最佳方式，即创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。<br><a id="more"></a></p><h2 id="一、简单工厂模式"><a href="#一、简单工厂模式" class="headerlink" title="一、简单工厂模式"></a>一、简单工厂模式</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>简单工厂模式又叫静态工厂方法模式，是由一个工厂对象决定创建出哪一种产品类的实例。</p><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="http://p0w1t27p0.bkt.clouddn.com/limynl/simple_factory_pattern.png?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p><ul><li>Shape：接口，简单工厂模式创建的所有对象都是它的子类，它负责描述所有实例所共有的公共接口；</li><li>Square、Circle、Rectangle：实现类，是简单工厂模式的创建目标；</li><li>ShapeFactory：根据需要，工厂创建具体对象</li><li>FactoryPatternDemo：客户端，发出请求，通知ShapeFactory。</li></ul><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>这里以上面的创建各种图形为例</p><h4 id="创建图形接口"><a href="#创建图形接口" class="headerlink" title="创建图形接口"></a>创建图形接口</h4><p>这里创建一个图形的接口，它有一个绘制图形的方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface Shape&#123;</span><br><span class="line">    void draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建具体的图形类"><a href="#创建具体的图形类" class="headerlink" title="创建具体的图形类"></a>创建具体的图形类</h4><p>这里创建各个具体的图形，它们都实现接口Shape，并实现其方法draw()</p><p><strong>正方形(Square)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Square implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw()&#123;</span><br><span class="line">        System.out.println(&quot;画正方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>圆(Circle)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw()&#123;</span><br><span class="line">        System.out.println(&quot;画圆&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>长方形(Rectangle)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Rectangle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw()&#123;</span><br><span class="line">        System.out.println(&quot;画长方形&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建工厂"><a href="#创建工厂" class="headerlink" title="创建工厂"></a>创建工厂</h4><p>接下来创建一个工厂ShapeFactory，他提供一个静态方法createShape用来绘制图形。只要你传入你想绘制的图形，它就会生成相应图形的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class ShapeFactory&#123;</span><br><span class="line">   public static Shape createShape(String type)&#123;</span><br><span class="line">       Shape shape = null;</span><br><span class="line">       switch(type)&#123;</span><br><span class="line">           case &quot;Square&quot;:&#123;</span><br><span class="line">               shape = new Square();</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">           case &quot;Circle&quot;:&#123;</span><br><span class="line">               shape = new Circle();</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">           case &quot;Rectangle&quot;:&#123;</span><br><span class="line">               shape = new Rectangle();</span><br><span class="line">           &#125;</span><br><span class="line">           break;</span><br><span class="line">       &#125;</span><br><span class="line">       return shape;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>接着客户端调用工厂，传入你想绘制的图形，调用绘制图形的方法，就可绘制出你想要的图形。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class FactoryPatternDemo&#123;</span><br><span class="line">    public static void main(String args)&#123;</span><br><span class="line">        Shape square = ShapeFactory.createShape(&quot;Square&quot;);</span><br><span class="line">        square.draw();</span><br><span class="line">        </span><br><span class="line">        Shape circle = ShapeFactory.createShape(&quot;Circle&quot;);</span><br><span class="line">        circle.draw();</span><br><span class="line">        </span><br><span class="line">        Shape rectangle = ShapeFactory.createShape(&quot;Rectangle&quot;);</span><br><span class="line">        rectangle.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">画正方形</span><br><span class="line">画圆</span><br><span class="line">画长方形</span><br></pre></td></tr></table></figure></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>我们明确地计划不同条件下创建不同实例时；</li><li>客户只知道传入工厂类的参数对于如何创建对象(逻辑)不关心。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优点：</strong></p><ul><li>一个调用者像创建一个具体的对象，只要知道其名称就可以了；</li><li>扩展性高，如果想增加一个具体的产品，只要扩展一个工厂类就行了，同时屏蔽了产品的具体实现。</li></ul><p><strong>缺点：</strong></p><ul><li>如果增加新类型，使得系统中类的个数也会成倍增加，增加了系统的复杂性，同时也需要修改工厂，违背了开放封闭原则。因此下面的工厂模式将对其进一步优化。</li></ul><h2 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。    </p><blockquote><p>注：工厂模式与简单工厂模式很相似，工厂模式中使用反射机制，弥补简单工厂模式中每次增加一个产品时，都需要增加一个对象实现工厂的缺点。即就是每增加一个类型，都需要修改工厂。</p></blockquote><h3 id="结构图-1"><a href="#结构图-1" class="headerlink" title="结构图"></a>结构图</h3><p>工厂模式的结构图跟简单工厂模式的结构图差不多，唯一不同的就是ShapeFactory中实现的逻辑不一样罢了。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>这里图形接口、各个具体的实现类跟上面的一样，因此我们只看ShapeFactory的实现方式：</p><h4 id="创建工厂-1"><a href="#创建工厂-1" class="headerlink" title="创建工厂"></a>创建工厂</h4><p>创建一个工厂ShapeFactory，它还是提供一个静态方法createShape用来绘制图形，但是传入的参数和实现逻辑与简单工厂模式略有不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class ShapeFactory&#123;</span><br><span class="line">    public static &lt;T extends Shape&gt; T createShape(Class&lt;T&gt; clz)&#123;</span><br><span class="line">        Shape shape = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            shape = (Shape)Class.forName(clz.getName()).newInstance();</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return (T)shape;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class FactoryPatternDemo&#123;</span><br><span class="line">    public static void main(String args)&#123;</span><br><span class="line">        Square square = ShapeFactory.createShape(Square.class);</span><br><span class="line">square.draw();</span><br><span class="line"></span><br><span class="line">Circle circle = ShapeFactory.createShape(Circle.class);</span><br><span class="line">circle.draw();</span><br><span class="line"></span><br><span class="line">Rectangle rect = ShapeFactory.createShape(Rectangle.class);</span><br><span class="line">rect.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">画正方形</span><br><span class="line">画圆</span><br><span class="line">画长方形</span><br></pre></td></tr></table></figure></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>同简单工厂模式相比较，可以看出，如果需要增加一个类型，先创建一个实现工厂接口的子类，然后在客户端调用即可，而不用再去修改工厂的内部逻辑。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从简单工厂模式中我们可以知道，工厂类中包含了必要的逻辑判断，根据不同的条件来动态实例化相关的类，对客户端来说，如果我们要增加一个产品，那我们就需要在工厂类中添加一个case分支条件，显然这违背了开放封闭原则，即对修改也开放了。而工厂模式就很好地解决了这个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p0w1t27p0.bkt.clouddn.com/limynl/site/factory_pattern_background.jpeg?imageView2/0/q/75|watermark/2/text/aHR0cDovL2xpbXlubC5zaXRl/font/5b6u6L2v6ZuF6buR/fontsize/440/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工厂模式是Java中最常用的设计模式之一。这种类型的模式属于创建型模式，它提供了一种创建对象的最佳方式，即创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://limynl.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://limynl.site/tags/Java/"/>
    
      <category term="设计模式" scheme="http://limynl.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
