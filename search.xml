<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[无题]]></title>
    <url>%2F2017%2F12%2F31%2Fcompetition-video%2F</url>
    <content type="text"><![CDATA[function doDecrypt(pwd, onError) { console.log("in doDecrypt"); var txt = document.getElementById("enc_content").innerHTML; var plantext; try { var bytes = CryptoJS.AES.decrypt(txt, pwd); plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) {onError(err);} return; } document.getElementById("enc_content").innerHTML = plaintext; document.getElementById("enc_content").style.display = "block"; document.getElementById("enc_passwd").style.display = "none"; } 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 请输入密码： var onError = function(error) { $("#enc_error")[0].innerHTML = "密码错误，请重新输入!"; }; function decrypt() { var passwd = $("#enc_passwd input")[0].value; doDecrypt(passwd, onError); }]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[设计模式(三)之工厂模式]]></title>
    <url>%2F2017%2F12%2F26%2Fdesign-pattern-factory%2F</url>
    <content type="text"><![CDATA[前言工厂模式是Java中最常用的设计模式之一。这种类型的模式属于创建型模式，它提供了一种创建对象的最佳方式，即创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。 一、简单工厂模式定义简单工厂模式又叫静态工厂方法模式，是由一个工厂对象决定创建出哪一种产品类的实例。 结构图 Shape：接口，简单工厂模式创建的所有对象都是它的子类，它负责描述所有实例所共有的公共接口； Square、Circle、Rectangle：实现类，是简单工厂模式的创建目标； ShapeFactory：根据需要，工厂创建具体对象 FactoryPatternDemo：客户端，发出请求，通知ShapeFactory。 简单实现这里以上面的创建各种图形为例 创建图形接口这里创建一个图形的接口，它有一个绘制图形的方法123public interface Shape&#123; void draw();&#125; 创建具体的图形类这里创建各个具体的图形，它们都实现接口Shape，并实现其方法draw() 正方形(Square)123456public class Square implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;画正方形&quot;); &#125;&#125; 圆(Circle)123456public class Circle implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;画圆&quot;); &#125;&#125; 长方形(Rectangle)123456public class Rectangle implements Shape&#123; @Override public void draw()&#123; System.out.println(&quot;画长方形&quot;); &#125;&#125; 创建工厂接下来创建一个工厂ShapeFactory，他提供一个静态方法createShape用来绘制图形。只要你传入你想绘制的图形，它就会生成相应图形的实例。 1234567891011121314151617181920public class ShapeFactory&#123; public static Shape createShape(String type)&#123; Shape shape = null; switch(type)&#123; case &quot;Square&quot;:&#123; shape = new Square(); &#125; break; case &quot;Circle&quot;:&#123; shape = new Circle(); &#125; break; case &quot;Rectangle&quot;:&#123; shape = new Rectangle(); &#125; break; &#125; return shape; &#125;&#125; 客户端接着客户端调用工厂，传入你想绘制的图形，调用绘制图形的方法，就可绘制出你想要的图形。123456789101112public class FactoryPatternDemo&#123; public static void main(String args)&#123; Shape square = ShapeFactory.createShape(&quot;Square&quot;); square.draw(); Shape circle = ShapeFactory.createShape(&quot;Circle&quot;); circle.draw(); Shape rectangle = ShapeFactory.createShape(&quot;Rectangle&quot;); rectangle.draw(); &#125;&#125; 结果为：123画正方形画圆画长方形 使用场景 我们明确地计划不同条件下创建不同实例时； 客户只知道传入工厂类的参数对于如何创建对象(逻辑)不关心。 优缺点优点： 一个调用者像创建一个具体的对象，只要知道其名称就可以了； 扩展性高，如果想增加一个具体的产品，只要扩展一个工厂类就行了，同时屏蔽了产品的具体实现。 缺点： 如果增加新类型，使得系统中类的个数也会成倍增加，增加了系统的复杂性，同时也需要修改工厂，违背了开放封闭原则。因此下面的工厂模式将对其进一步优化。 二、工厂模式定义定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。 注：工厂模式与简单工厂模式很相似，工厂模式中使用反射机制，弥补简单工厂模式中每次增加一个产品时，都需要增加一个对象实现工厂的缺点。即就是每增加一个类型，都需要修改工厂。 结构图工厂模式的结构图跟简单工厂模式的结构图差不多，唯一不同的就是ShapeFactory中实现的逻辑不一样罢了。 具体实现这里图形接口、各个具体的实现类跟上面的一样，因此我们只看ShapeFactory的实现方式： 创建工厂创建一个工厂ShapeFactory，它还是提供一个静态方法createShape用来绘制图形，但是传入的参数和实现逻辑与简单工厂模式略有不同： 1234567891011public class ShapeFactory&#123; public static &lt;T extends Shape&gt; T createShape(Class&lt;T&gt; clz)&#123; Shape shape = null; try&#123; shape = (Shape)Class.forName(clz.getName()).newInstance(); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; return (T)shape; &#125;&#125; 客户端123456789101112public class FactoryPatternDemo&#123; public static void main(String args)&#123; Square square = ShapeFactory.createShape(Square.class); square.draw(); Circle circle = ShapeFactory.createShape(Circle.class); circle.draw(); Rectangle rect = ShapeFactory.createShape(Rectangle.class); rect.draw(); &#125;&#125; 结果为：123画正方形画圆画长方形 优点同简单工厂模式相比较，可以看出，如果需要增加一个类型，先创建一个实现工厂接口的子类，然后在客户端调用即可，而不用再去修改工厂的内部逻辑。 总结从简单工厂模式中我们可以知道，工厂类中包含了必要的逻辑判断，根据不同的条件来动态实例化相关的类，对客户端来说，如果我们要增加一个产品，那我们就需要在工厂类中添加一个case分支条件，显然这违背了开放封闭原则，即对修改也开放了。而工厂模式就很好地解决了这个问题。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String之间的那点儿事]]></title>
    <url>%2F2017%2F12%2F24%2Fstring-detail-introduce%2F</url>
    <content type="text"><![CDATA[前言之前了解了String、StringBuilder和StringBuffer之间简单的区别，比如String是不可变的，StringBuilder是可变的，StringBuffer是线程安全的等，但对于它们为什么有这些特性却完全蒙蔽，知其然不知其所以然，因此下面将结合最近掌握的，对它们进行详细总结。 三者关系为了更好的理解这三者的关系，下面是它们的关系图： 从图中可以看出它们都是从CharSequence (是一个接口，表示char值的一个可读序列，此接口对许多不同种类的char序列提供统一的读写访问)扩展而来，同时String、StringBuilder和StringBuffer的本质都是通过字符数组实现的。 String详解常见创建方式 方式一：使用关键字new，如：String s1 = new String(“Hello World”); 方式二：直接定义，如：String s2 = “Hello World”; 当然通过构造函数创建一个String还有很多其他方式，这里就以参数为String的为例 下面通过简单的内存分析图，说明这两种方式的区别：因此从上面可以看出使用方式一，内存为其分配了两个对象，至于常量池中”Hello World”为什么是一个对象，这就要更深层次的分析了，这里就不做过多的解释；而方式二只创建了一个对象。 因此这里就得出了平时的结论：&emsp;&emsp;1、当需要创建String字符串时，推荐使用方式二的形式，因为使用方式一增大堆内存的消耗；&emsp;&emsp;2、它们之间的“==”关系：1234567public class TestString&#123; public static void main(String[] args)&#123; String str1 = new String("Hello World"); String str2 = "Hello World"; System.out.println(str1 == str2); &#125;&#125; &emsp;&emsp;当然结果为：false，因为str1、str2不是引用的同一个对象。&emsp;&emsp;3、从图中可以看出String的内部通过char[] value进行管理的，因此String的本质是字符数组。 源码解析类定义12public final class String implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123; String被final修饰，说明该类不能被继承； 实现Serializable，说明可以序列化和反序列化； 实现Comparable，说明可以进行自定义的字符串比较； 实现CharSequence，说明利用CharSequence可以实现读写方式。 成员变量源码中可以看见这样一个成员变量：12//存储字符串中元素的字符数组private final char value[]; 该成员变量是一个字符数组表明，String的本质就是一个字符数组，通过这个字符数组来存储字符内容； 该字符数组被final修饰，而且value是引用变量，因此可以知道一旦被初始化，即指向内存中一个数组，就不能再指向别的数组了； 看到这里我们就可以得出结论：String是不可变的！注意：String不可变是指其内容不能被修改，但是其引用还是可以指向其他内容。 &emsp;&emsp;比如：1234String s3 = "abc";String s4 = "def";s3 = s4;System.out.println(s3); &emsp;&emsp;因此输出结果为：def &emsp;&emsp;这里拿图说话 ☟：&emsp;&emsp;因此从图可知，s3的原来所引用的对象内容确实没有改变，改变的仅仅是s3引用的对象。 &emsp;&emsp;⊙(・◇・)？ 思考：s3所引用的对象内容到底可不可改变&emsp;&emsp;&emsp;&emsp;我们都知道对象引用，引用的是对象的地址，它根本就不知道对象的实际内容，因此如果String类中如果提供一个可以修改value字符串数组内容的方法，那么String就变成可修改的了，因此实际上String没有这么一个方法。实际上也不应该提供这么一个方法，否则String类就没有意义了。 常用方法介绍上面详细介绍了String类的特性，下面对其几个常用方法进行简要分析，以此对String类的相关特性进一步了解： 1、构造方法：&emsp;&emsp;(1)、无参构造函数：会创建一个空的字符序列，因为字符串是不可变的，所以没必要使用。123public String() &#123; this.value = new char[0];&#125; &emsp;&emsp;(2)、String为参数的构造函数：这个构造方法会产生两个字符串对象，用来初始化一个和输入参数具有相同字符序列的字符串对象，换句话说，新建的这个字符串对象是传入的字符串参数对象的一份副本，除非是明确地需要使用字符串复制功能，否则由于字符串常量值是不可变的，这个构造函数是没有必要使用。1234public String(String original) &#123; this.value = original.value; this.hash = original.hash;&#125; &emsp;&emsp;(3)、将传入的字符数组复制到一个新的字符数组，并将当前对象的value(即this.value)指向它。12345678910public String(char value[]) &#123; this.value = Arrays.copyOf(value, value.length);&#125;public String(char value[], int offset, int count) &#123; . . . this.value = Arrays.copyOfRange(value, offset, offset+count);&#125; &emsp;&emsp;(4)、使用字节数组创建字符串，同时还可以使用指定的解码方式进行解码。 123456public String(byte bytes[])public String(byte bytes[], int offset, int length) // 从offset开始，长度为length 并以默认的 ISO-8859-1 编码转换成字符串public String(byte bytes[], Charset charset)public String(byte bytes[], String charsetName)public String(byte bytes[], int offset, int length, Charset charset)public String(byte bytes[], int offset, int length, String charsetName) 2、常用方法：&emsp;&emsp;(1)、字符串截取，创建了一个新数组，因此牺牲了一定的空间性能。1234567891011121314public String substring(int beginIndex, int endIndex) &#123; if (beginIndex &lt; 0) &#123; throw new StringIndexOutOfBoundsException(beginIndex); &#125; if (endIndex &gt; value.length) &#123; throw new StringIndexOutOfBoundsException(endIndex); &#125; int subLen = endIndex - beginIndex; if (subLen &lt; 0) &#123; throw new StringIndexOutOfBoundsException(subLen); &#125; return ((beginIndex == 0) &amp;&amp; (endIndex == value.length)) ? this : new String(value, beginIndex, subLen);&#125; &emsp;&emsp;(2)、比较两个字符串，可以看出是比较的一个一个字符内容，因此两个相同字符串内容的String对象比较，都是true123456789101112131415161718192021public boolean equals(Object anObject) &#123; if (this == anObject) &#123; return true; &#125; if (anObject instanceof String) &#123; String anotherString = (String) anObject; int n = value.length; if (n == anotherString.value.length) &#123; char v1[] = value; char v2[] = anotherString.value; int i = 0; while (n-- != 0) &#123; if (v1[i] != v2[i])//对两个字符串中的字符一个一个比较 return false; i++; &#125; return true; &#125; &#125; return false;&#125; String中还有很多其他方法，具体的自己可以去看看源码，基本上都是字符数组的操作~~~ 扩展：到底创建了几个对象？概念常量池：指的是在编译期被确定，并保存在以编译的.class文件中的一些数据。它包括了关于类、方法、接口等中的==常量==，也包括==字符串常量==。 情形一12String a = "abc";String b = "abc"; 上面总共创建了一个对象，由于执行到第一行时常量池中并不存在”abc”，故需要创建一个对象，执行到第二行时，由于常量池中存在”abc”，故直接共享常量池中的内容，因此不会创建对象。 情形二1234String test = "abcdefxyz";String s5 = "abc" + "def";String s6 = s5 + "xyz";System.out.println(test == s6);//false 上面两句代码各创建了几个对象：&emsp;&emsp;(1)、首先对于String s5 = “abc” + “def”; 一般我们会认为创建了两个对象，即”abc”和”def”，其实不然，由于常量的值在编译时执行“+”就被确定了，因此变量s5在编译时就可以确定为”abcdef”，因此实际上只创建了一个对象，其实这里就是Java中String的一种优化。&emsp;&emsp;(2)、对于String s6 = s5 + “xyz”; 由于s5是一个变量，在编译时它的值并不确定，故并不会实现编译优化，因此就会产生两个对象，即”xyz”和”abcdefxyz”。12345String test = "aaabbb";final String s7 = "aaa";final String s8 = "bbb";String s9 = s7 + s8;System.out.println(test == s9);//true &emsp;&emsp;(3)、对于上面的String s9 = s7 + s8; 并不产生对象，因为s7、s8均为常量，所以编译时就能确定，编译时就会将常量替换，等同于是s9 = “aaa”+”bbb”，因此不产生新对象。 结论： 使用“+”连接的两个字符串本身就是字面常量字符串时，如果池中存在这样连接后的字符串，则是不会重新创建对象，而是直接引用池中的字符串对象； 如果“+”连接的两字符串中只要有一个不是字面常量串（即定义过的），是会产生新的字符串对象。 情形三1234567891011//案例一String s7 = new String("abc");for(int i = 0;i &lt; 100;i++)&#123; s7 = s7 + i;&#125;//案例二String s8 = "def";for(int i =0;i &lt; 100;i++)&#123; s8 = s8 + i;&#125; &emsp;&emsp;因此从前面我们可以知道案例一情况下，将会产生102个对象；案例二情况下，将会产生101个对象。因此当我们的程序中需要大量的拼接字符串时，应该使用效率更高的StringBuilder。 优点从上面可以看出虽然String不可变，但是总有其好处： 由于它的不可变特性，当我们传参数时，使用不可变类不需要去考虑谁可能会修改其内部的值，因此相对较安全； 由于常量池的作用，对个引用变量可以引用同一个字符串实例，避免频繁创建实例的开销。 结语由于文章篇幅较长，因此将分两部分介绍，传送☞ ++深度解析StringBuilder和StringBuffer++]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式(二)之单例模式]]></title>
    <url>%2F2017%2F12%2F15%2Fdesign-pattern-singleton%2F</url>
    <content type="text"><![CDATA[前言单例模式(Singleton Pattern)是Java中最简单的设计模式之一。这种模式设计到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，外部不需要实例化该类的对象。 结构图一般单例模式共有六种，单例模式根据实例化对象时机的不同主要分为两种： 饿汉式：该类型在单例类被加载时候，就实例化一个对象交给自己的引用； 懒汉式：当需要时才会去加载，并实例化该对象。 懒汉式(线程不安全)12345678910111213141516171819public class Singleton&#123; //声明一个私有化静态变量 private static Singleton instance; //构造器私有化，避免外部直接创建对象 private Singleton()&#123; &#125; //对外提供一个公共的静态方法访问该变量，如果该变量没有对象，则创建 public static Singleton getInstance()&#123; if(instance == null)&#123; instance = new Singleton(); &#125; return instance; &#125; &#125; 说明： 该方式在用户第一次调用时初始化，实现了懒加载，但是在多线程环境下不能工作。 懒汉式(线程安全)1234567891011121314151617181920public class Singleton&#123; //声明一个私有化静态变量 private static Singleton instance; //构造器私有化，避免外部直接创建对象 private Singleton()&#123; &#125; //对外提供一个公共的静态方法访问该变量，如果该变量没有对象，则创建 //同时使用synchronized保证了线程的安全 public static synchronized Singleton getInstance()&#123; if(instance == null)&#123; instance = new Singleton(); &#125; return instance; &#125; &#125; 说明： 该方式具备懒加载，在多线程下能很好的工作，但是每次调用getInstance方法时都需要进行同步，造成不必要的同步开销，因此该方法不常使用。 饿汉式123456789101112131415public class Singleton&#123; //声明私有静态变量，同时创建该对象，因此类加载时该对象就已经存在 private static Singleton instance = new Singleton(); //构造器私有化，避免外部直接创建对象 private Singleton()&#123; &#125; //对外提供公共的静态方法访问该对象 public static Singleton getInstance()&#123; return instance; &#125;&#125; 说明： 该方式在类加载时就完成了初始化，因此不具备懒加载，但获取对象的速度快，但是该方式基于类加载机制避免了多线程的同步问题，因此是线程安全的，没有加锁，执行效率会提高 双重校验方式12345678910111213141516171819202122public class Singleton&#123; //声明一个私有化静态变量 private volatile static Singleton instance= null; //构造器私有化，避免外部直接创建对象 private Singleton()&#123; &#125; public static Singleton getInstance()&#123; if(instance == null)&#123;//当存在该对象时，直接返回该对象，为了提高效率，避免互斥等待 synchronized (Singleton.class) &#123;//保证多线程的安全 if(instance == null)&#123;//确保一个类只有一个对象 instance = new Singleton(); &#125; return instance; &#125; &#125; return instance; &#125;&#125; 说明： 注意两个if条件的作用，第一个if是为了避免每次getInstance()都进行不必要的同步，第二个if是为了在instance为null的条件下，创建该类的实例。该方式采用双锁机制，安全且在多线程下能保持高性能，同时该方式也是在需要的时候才去加载，效率高，有很好的懒加载效果。缺点是第一次加载时反应稍慢一些，在高并发环境下也有一定的缺陷，虽然发生的概率很小。同时程序中使用volatile会或多或少的影响性能，但考虑到程序的正确性，牺牲这点性能还是值得的。 静态内部类方式1234567891011121314151617public class Singleton&#123; //定义一个静态内部类 private static class SingleHolder&#123; private static Singleton instance = new Singleton(); &#125; //私有化构造函数 private Singleton()&#123; &#125; //在需要时才去加载 public Singleton getInstance()&#123; return SingleHolder.instance; &#125;&#125; 说明： 当Singleton类加载时，SingleHolder并不会加载，只有在第一次调用getInstance()时，SingleHolder才会加载，因此保证了线程安全和Singleton类的唯一性，同时具备很好的懒加载。该种方式跟双重校验能达到相同效果，但是该方式只适用于静态域的情况，双重校验方式可在实例域需要延迟初始化时使用。 枚举类型方式1234567public enum Singleton&#123; INSTANCE; public void doSomeThing() &#123; &#125; &#125; 说明： 默认枚举实例的创建是线程安全的，并且在任何情况下都是单例，因此不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。但是该种方式，用的比较少，可读性不高。 扩展 上面六种方式，除了枚举类型单例，其余的方式在反序列化情况下会重新创建对象，即将一个单例实例对象从磁盘或者网络写回来时，为了避免这种情况，反序列化操作提供了readResolve方法，这个方法可以让开发人员控制对象的反序列化，因此在上述的几个方法示例中如果要杜绝单例对象被反序列化时重新生成对象，就必须加入如下方法： 123private Object readResolve() thows ObjectStreamException&#123; return instance;&#125; 上面说到序列化时，会产生多个实例，同时在分布式系统、多个类加载器的情况下都会产生多个单例实例。同时使用反射方式，也会得到新的单例： 1234Class c = Class.forName(Singleton.class.getName()); Constructor ct = c.getDeclaredConstructor(); ct.setAccessible(true); Singleton singleton = (Singleton)ct.newInstance(); 这样，每次运行都会产生新的单例对象。所以运用单例模式时，一定注意不要使用反射产生新的单例对象。 总结特点： 一个单例类只能有一个实例； 单例类必须自己创建自己的唯一实例； 单例类必须给所有其他对象提供这一实例。 优点： 在内存中只有一个对象，节省内存空间； 避免频繁的创建销毁对象，可以提高性能； 避免对共享资源的多重占用； 可以全局访问。 注意： 只能使用单例类提供的getInstance()得到单例对象，不要使用反射，否则将会实例化一个新对象； 不要做断开单例类对象与类中静态引用的危险操作； 多线程使用单例使用共享资源时，注意线程安全问题； 在反序列化时，重写readResolve()方法。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式(一)之概述]]></title>
    <url>%2F2017%2F12%2F15%2Fdesign-pattern-summary%2F</url>
    <content type="text"><![CDATA[前言设计模式是一套被反复使用的、多数人知晓的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使代码编制真正工程化，它是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。 设计模式类型创建型模式这些设计模式提供了一种在创建对象的同时隐藏其创建逻辑的方式，而不是直接使用new运算符直接实例化对应的对象，这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。具体有以下几种： 工厂模式 抽象工厂模式 单例模式 建造者模式 原型模式 结构型模式该类设计模式关注类和对象的组合，是一种使用继承和定义接口以获取新功能的方式。具体有以下几种：： 适配器模式 桥接模式 过滤器模式 组合模式 装饰器模式 外观模式 享元模式 代理模式 行为型模式该类设计模式特别关注对象之间的通信。具体有以下几种： 责任链模式 命令模式 解释器模式 迭代器模式 中介者模式 备忘录模式 观察者模式 状态模式 空对象模式 策略模式 模板模式 访问者模式 设计六大原则1、单一职责原则含义：&emsp;&emsp;就一个类而言，引起他的变化应该仅有一个，即一个类只负责一项职责。 解读：&emsp;&emsp;这句话的含义就是不要让一个类承担过多的职责，如果一个类承担的职责过多，就等于将这些职责耦合在一起，一个职责的变化可能会引起这个类中其他职责的变化，甚至会削弱或抑制这个类完成其他职责的能力，以致当这个类中的某个职责发生变化时，设计会遭到破坏。&emsp;&emsp;就像之前做Android的时候，在一个Activity中既要关注界面的变化、又要对数据进行处理，以致于如果这个Activity要实现的功能比较复杂的话，那么这个Activity类中的代码是比较臃肿的，导致后期维护时，对于他人来说是比较蛋疼的，修改了一个地方可能会引起其他地方相应作出修改，这样就会导致引起这个Activity变化原因过多。因此也就背离了单一职责原则的含义。 说明：&emsp;&emsp;1、单一职责原则降低了类的复杂度，一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多；&emsp;&emsp;2、它提高类的可读性，提高系统的可维护性；&emsp;&emsp;3、让变更引起的风险降低，变更是必然的，如果单一职责原则遵守好，当修改一个功能时，可以显著降低对其他功能的影响。 2、里氏替换原则含义：&emsp;&emsp;所有使用基类的地方必须能透明地使用其子类的对象。 解读：&emsp;&emsp;在软件中将一个基类对象替换成它的子类对象，程序将不会产生任何错误和异常，即使用基类的地方一定能够使用其子类。反过来则不成立，如果一个软件实体使用的是一个子类对象的话，那么它不一定能够使用基类对象。&emsp;&emsp;里氏代换原则是实现开闭原则的重要方式之一，由于使用基类对象的地方都可以使用子类对象，因此在程序中尽量使用基类类型来对对象进行定义，而在运行时再确定其子类类型，用子类对象来替换父类对象。&emsp;&emsp;例如在一个邮件系统中，用户分为普通用户可VIP用户，但是这两种类型都具有发邮件的功能，因此相应的类图为：但是我们在实现在，无论是普通用户还是VIP用户，发邮件的过程都是相同的，因此两个send方法中的代码将会重复，如果以后还会增加其他类型的用户呢？那么这个系统的代码将会很冗余。因此通过里氏替换原则，可以对其进行如下修改:这里增加了一个抽象类，作为所有类型的基类，发送类EmailSender类针对抽象客户类Customer编程，因此我们用基类类型来对对象进行定义，当运行时再确定其子类类型，从而实现用子类对象来代替基类对象。同时如果还需要增加其他类型的话，只需要继承Customer类就行。 说明：&emsp;&emsp;使用里氏替换原则需要注意以下几点：&emsp;&emsp;1、子类的所有非私有方法应该在基类中声明，或子类必须实现父类中声明的方法(子类可以扩展基类的功能，但不能改变基类原有的功能)。即为了保证系统的扩展性，在程序中通常使用基类来进行定义，如果一个方法只存在子类中，在子类中不提供相应的声明，则无法在以父类定义的对象中使用该方法。&emsp;&emsp;2、在运用里氏代换原则时，尽量把父类设计为抽象类或者接口，让子类继承父类或实现父接口，并实现在父类中声明的方法，运行时，子类实例替换父类实例，我们可以很方便地扩展系统的功能，同时无须修改原有子类的代码，增加新的功能可以通过增加一个新的子类来实现。这里也体现了里氏代换原则是开闭原则的具体实现手段之一。&emsp;&emsp;3、Java语言中，在编译阶段，Java编译器会检查一个程序是否符合里氏代换原则，这是一个与实现无关的、纯语法意义上的检查，但Java编译器的检查是有局限的。 3、依赖倒置原则含义：&emsp;&emsp;高层模块不应该依赖底层模块，两者都应该依赖其抽象。即：抽象不应该依赖细节，细节应该依赖抽象。 解读：&emsp;&emsp;在Java中，抽象就是指接口或抽象类，两者是不能直接被实例化的，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成，而细节就是实现类，实现接口或继承抽象类而产生的就是细节。而高层模块就是调用者，底层模块就是具体实现类。&emsp;&emsp;依赖倒置原则在Java中的表现就是：模块间通过抽象发生，实现类之间不发生直接依赖关系，其依赖关系是通过接口或者抽象类产生的。如果类与类直接依赖细节，那么就会直接耦合，那么当修改时，就会同时修改依赖者代码，这样限制了可扩展性。&emsp;&emsp;例如下面这个例子：一个学生应该具有学习多门课程的能力。比如他喜欢学习语文。123456789101112131415161718public class StudyChinese&#123; public String ability()&#123; return "我能学习语文!"; &#125;&#125;public class Student&#123; public void study(StudyChinese chinese)&#123; System.out.println(chinese.ability()); &#125;&#125;public class Client&#123; public static void main(String[] args)&#123; Student student = new Student(); student.study(new StudyChinese()); &#125;&#125; 此时可以看出该学生能够学语文，但是还应该能够学习数学、英语等，要实现这些那么我们应该将Student不断进行修改，显然这样操作的话，各个类之间的耦合度就太高了。因此我们可以引入一个接口：123interface IStudy&#123; public String ability();&#125; 这样该学生就不止会学语文了：12345678910111213141516171819202122232425public class StudyChinese impliments IStudy&#123; public String ability()&#123; return "我能学习语文!"; &#125;&#125;public class StudyMath impliments IStudy&#123; public String ability()&#123; return "我能学习数学!"; &#125;&#125;public class Student&#123; public void study(IStudy study)&#123; System.out.println(study.ability()); &#125;&#125;public class Client&#123; public static void main(String[] args)&#123; Student student = new Student(); student.study(new StudyChinese()); student.study(new StudyMath()); &#125;&#125; 因此现在只需要修改Client，就能扩展该学生的知识，学习相应的课程。从而就不用再去修改Student类了。 说明：&emsp;&emsp;1、底层模块尽量都要有接口或抽象类；&emsp;&emsp;2、形参类型尽量为接口或抽象类类型，即遵循里氏替换原则。&emsp;&emsp;3、传递依赖关系有三种方式，分别为：接口传递、构造方法传递、setter方法传递，以上的例子使用的是接口传递。&emsp;&emsp;4、通过上面的例子可以看出依赖倒置原则给并行开发带来了极大的便利，先前Student类和StudyChinese类耦合在一起，就是说Student类必须等StudyChinese类完成后才能编码；而优化后的程序可以看出St类与StudyChinese、StudyMath类没有任何直接关系，因此将提高开发效率。 4、接口隔离原则含义：&emsp;&emsp;客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。 解读：&emsp;&emsp;建立接口时，应该建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。&emsp;&emsp;就如下面的例子：12345678910111213141516171819202122232425262728293031323334353637383940interface I&#123; public void method1(); public void method2(); public void method3(); public void method4();&#125;//对于类A只需要method1、m但因为实现接口I，因此也要实现不需要的method3、method4，即使这两个方法的方法体为空。public class A impliments I&#123; public void method1()&#123; System.out.println("实现方法一"); &#125; public void method2()&#123; System.out.println("实现方法二"); &#125; public void method3()&#123; &#125; public void method4()&#123; &#125;&#125;//类B与A相识，为了实现接口I也要实现不需要的method1、method2public class B impliments I&#123; public void method1()&#123; &#125; public void method2()&#123; &#125; public void method3()&#123; System.out.println("实现方法三"); &#125; public void method4()&#123; System.out.println("实现方法四"); &#125;&#125; 因此从上面可以看到，如果接口过于臃肿，只要接口中出现的方法，不管对依赖于它的类有没有用，实现类中都必须去实现这些方法。因此我们可以对接口进行拆分：1234567891011121314151617181920212223242526272829interface I1&#123; public void method1(); public void method2();&#125;interface I2&#123; public void method3(); public void method4();&#125;public class A impliments I1&#123; public void method1()&#123; System.out.println("实现方法一"); &#125; public void method2()&#123; System.out.println("实现方法二"); &#125;&#125;public class B impliments I2&#123; public void method3()&#123; System.out.println("实现方法三"); &#125; public void method4()&#123; System.out.println("实现方法四"); &#125;&#125; 因此在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。 说明：&emsp;&emsp;1、接口应该尽量小，但是要有限度，因为接口过小的话，就会造成接口数量过多，使设计复杂化。因此要掌握好这个“度”应该在平时对相应问题进行仔细思考。&emsp;&emsp;2、要建立最小的依赖关系，应该为依赖接口的类定制服务，即之暴露给调用的类它需要的方法，将不需要的方法隐藏起来。&emsp;&emsp;3、注意与单一职责原则相区别：&emsp;&emsp;&emsp;(1)、单一职责原则原注重的是职责，而接口隔离原则注重对接口依赖的隔离；&emsp;&emsp;&emsp;(2)、单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。 5、迪米特法则含义：&emsp;&emsp;一个软件实体应当尽可能少的与其他实体发生相互作用，又叫做最少知道原则。 解读：&emsp;&emsp;通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。&emsp;&emsp;迪米特法则要求我们在设计系统时，应该尽量减少对象之间的交互，如果两个对象之间不必彼此直接通信，那么这两个对象就不应当发生任何直接的相互作用，如果其中的一个对象需要调用另一个对象的某一个方法的话，可以通过第三者转发这个调用。简言之，就是通过引入一个合理的第三者来降低现有对象之间的耦合度。&emsp;&emsp;例如下面的例子：当ClassBase有动作时时，和它有关联的类ClassB、ClassC、ClassD等都将发生改变。因此从上面可以看见由于类之间的交互关系复杂，导致在该系统中增加新的对象时需要修改与之交互的其它类的源代码，系统扩展性较差，也不便于增加和删除新对象。&emsp;&emsp;下面将引入一个专门用于控制对象间交互的中介类(Agent)来降低各对象之间的耦合度。引入中间类之后，相关对象之间不再发生直接引用，而是将请求先转发给中间类，再由中间类来完成对其它对象的调用。当需要增加或删除新的对象时，只需修改中间类即可，无须修改新增对象或已有对象的源代码。 说明：&emsp;&emsp;1、在类的划分上，应当尽量创建松耦合的类，类之间的耦合度越低，就越有利于复用，一个处在松耦合中的类一旦被修改，不会对关联的类造成太大波及；&emsp;&emsp;2、在类的结构设计上，每一个类都应当尽量降低其成员变量和成员函数的访问权限；&emsp;&emsp;3、在类的设计上，只要有可能，一个类型应当设计成不变类；&emsp;&emsp;4、在对其他类的引用上，一个对象对其他对象的引用应当降到最低。&emsp;&emsp;5、迪米特法则的另外一层含义是：只与直接的朋友通信。直接朋友指：&emsp;&emsp; (1)、当前对象本身(this);&emsp;&emsp; (2)、以参量形式传入到当前对象方法中的对象;&emsp;&emsp; (3)、当前对象的实例变量直接引用的对象;&emsp;&emsp; (4)、当前对象的实例变量如果是一个聚集，那么聚集中的元素也都是朋友;&emsp;&emsp; (5)、当前对象所创建的对象。&emsp;&emsp; 任何一个对象，如果满足上面的条件之一，就是当前对象的“朋友”；否则就是“陌生人”。 6、开放封闭原则含义：&emsp;&emsp;多扩展开放、对修改关闭，即类、函数等等应该能够扩展，而不是去修改。 解读：&emsp;&emsp;从上面的含义我们知道该原则有两方面的意思，一个就是对于扩展是开放的，另一个就是对于修改是封闭的。就是说当程序需要进行扩展的时候，不能去修改原有的代码，实现一个热插拔的效果。因为在实际开发中需求的改变在所难免，但是需求一变就把所涉及的类重新改一遍这个显然很头疼，因此我们在设计程序时，要针对需求尽量保证代码的相对稳定。简言之，就是为了使程序的扩展性好，易于维护和升级。&emsp;&emsp;其实从上面的叙述来说，开放封闭有点模糊，尽管知道要扩展开放、对修改关闭，但是如何才能做到呢？其实我们经过前面五大原则可以发现，要实现开放封闭原则，无非就是用抽象构建框架，用实现扩展细节，因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来扩展就可以了。 说明：&emsp;&emsp; 1、里氏替换原则开放封闭原则的实现提供保证；&emsp;&emsp; 2、封装变化，是实现开放封闭原则的重要手段，对于经常发生变化的状态一般将其封装为一个抽象，但是拒绝滥用抽象，只将经常变化的部分进行抽象。 总结对于上面的六大原则可概括为： 单一职责原则: 实现类要职责单一; 里氏替换原则: 不要破坏继承体系; 依赖倒置原则: 使用面向接口编程; 接口隔离原则: 设计接口精简单一; 迪米特法则:&emsp; 类与类要降低耦合。 对于这六大原则的使用，我们应该尽量合理地遵守，也不用刻意去遵守，否则将会遵守过渡。对于具体如何使用，就要靠平时的学习积累，以及依照个人经验来定，当然经验的好坏，将决定整个设计的质量。 结语提高自己的方法有很多，将自己学过的以这种方式记录下来，希望自己有所收获，同时希望能够帮助需要帮助的人~~~]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Github搭建属于自己的博客By Hexo]]></title>
    <url>%2F2017%2F12%2F13%2F%E4%BD%BF%E7%94%A8Github%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2By-Hexo%2F</url>
    <content type="text"><![CDATA[前言其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站。作为自己博客的开篇之作，仅仅想用这种方式来记录自己搭建博客的过程，希望能给需要的朋友带来帮助。现在大家用hexo比较多，也比较方便，并且能使用的主题也很多，因此下面将讲述使用Github和Hexo来搭建属于自己的博客！ 环境准备安装Git初次安装可以按照下面步骤操作，如果已安装可以忽略 下载 Git 然后执行安装文件，如果没有特殊需求的话，一路next就行。 运行cmd打开命令符提示窗口，输入下面的命令，如果出现以下界面，代表Git安装成功。 1git version 安装Node.js Hexo是基于Node.js环境的静态博客，需要使用Node.js的npm命令，因此下载 Node.js (注意：LTS为长期支持版，Current为当前最新版) 并执行安装文件，一路next。 运行cmd打开命令符提示窗口，输入下面的命令，如果出现以下界面，代表Node.js安装成功。 12node -vnpm -v 安装Hexo 首先在一个空的文件夹下（如 D:\hexo），输入下面的命令(在 D:\hexo 内点击鼠标右键，选择 Git Bash Here)，当出现以下类似界面时，代表Hexo安装成功 12npm install hexo-cli -ghexo -v 输入以下命令，初始化完成后将在当前文件夹下看见如下所示的文件 12npm install hexo --savehexo init 12345678910├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json #项目所需模块项目的配置信息 初始化hexo后，接着输入下面命令，同样也是做初始化 1npm install 如果上面的操作都没有问题的话，接下来输入如下命令，这两步操作就是加载hexo对应的html、css、js等文件，并且开启本地服务器，操作完成后在浏览器输入http://localhost:4000/ 就可以看见如下界面，说明本地hexo默认模板配置成功。 12hexo ghexo s Github创建仓库经过上面的操作，我们已经在本地搭建好了相关环境，并且已经看见了我们的默认博客界面，那么如何通过外部链接访问我们的博客呢？下面将一一叙述： 如果你还没有 Github 账号，请先创建一个，然后用自己创建的账号进行登录。并按照如下步骤操作： 添加SSH，在本机任何位置右击，选择Git Gui Here，弹出的界面，点击Help-&gt;Show SSH Key，复制你的SSH。(添加SSH的目的可以避免以后每次部署时都需要输入用户名和密码) 回到刚刚创建的仓库界面，依次按照下面步骤操作： 当添加完毕后，如果你是初次安装的话，需要进行在git中配置GitHub信息，如下所示(name和email均与Github相对应)： 当配置完成后，可以进行如下进行验证1ssh -T git@github.com 到这里环境搭建部分就结束了，下面我们将自己的本地博客部署到Github上面。 Hexo部署修改配置文件 在刚才初始化生成的文件中有一个_config.yml文件，用编辑器打开，定位到下面位置所示，进行相应的修改。 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 常见Hexo命令在正式部署之前，先简单了解下Hexo常用的命令，如下：12345678hexo help #查看帮助hexo init #初始化一个目录hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo generate #生成网页，可以在 public目录查看整个网站的文件hexo server #本地预览，'Ctrl+C'关闭hexo deploy #部署.deploy目录hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹** 相应的简写形式为：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 上传Github 首先执行如下命令，目的是安装相应的插件 1npm install hexo-deployer-git --save 同时在该目录下(比如 D:\hexo)，打开gitbash，输入如下命令： 123hexo cleanhexo generatehexo deploy 注意：首次deploy(部署)的时候，可能会叫你输入username和password(与Github上的信息相对应就行)。 当看到如下信息时，就代表部署成功，同时在Github上点击该项目对应的setting，并且定位到Github Pages，会看到如下提示：Your site is published at http://yourname.github.io 1[info] Deploy done: git 最后再浏览器中输入http://yourname.github.io 就能访问你的博客了。 至此自己的博客就搭建完成了，但是目前访问的是Hexo的一个默认页面。下面将叙述如何DIY自己的博客，以及如何导入模板主题。 主题配置安装主题由于Hexo提供的主题较多，大家可以去github搜自己喜欢的主题，这里我使用的是Hexo提供的hexo-theme-next主题，个人觉得这个主题比较简洁，但是不同主题安装的方法都大致相同，只不过相关的配置有些差异而已。因此下面将以next主题为例一步一步叙述。 选中自己比较喜欢的主题后，获取对应的链接， 然后在我们本地hexo目录下打开gitbash，执行下面命令(注意这里是以next主题为例)，目的是将其主题对应的工程clone下来。 1git clone https://github.com/iissnan/hexo-theme-next themes/next 注意：到目前为止我们已经将自己喜欢的主题clone下来了，因此在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。所以我们常将将前者称为站点配置文件， 后者称为主题配置文件。 然后打开站点配置文件，找到theme字段，并将其值改为next 1theme: next 打开本地服务器进行验证，当看见如下界面是，就说明Next主题安装成功。 1hexo s 如果想更改其他内容，均可以在站点配置文件和主题配置文件中进行相应的配置。以下为站点配置文件的详细内容(对照着注基本上没有问题)： 需要注意的是： 配置文件的冒号 “:” 后面有一个空格; 如果修改了配置文件存在中文乱码问题，就将配置文件另存为utf-8的格式。 站点配置文件详细说明：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970# Hexo Configuration# Docs: http://hexo.io/docs/configuration.html# Source: https://github.com/hexojs/hexo/# Site #站点信息title: #标题subtitle: #副标题description: #站点描述，给搜索引擎看的author: #作者email: #电子邮箱language: zh-CN #语言# URL #链接格式url: #网址root: / #根目录permalink: :year/:month/:day/:title/ #文章的链接格式tag_dir: tags #标签目录archive_dir: archives #存档目录category_dir: categories #分类目录code_dir: downloads/codepermalink_defaults:# Directory #目录source_dir: source #源文件目录public_dir: public #生成的网页文件目录# Writing #写作new_post_name: :title.md #新文章标题default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）titlecase: false #标题转换成大写external_link: true #在新选项卡中打开连接filename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsehighlight: #语法高亮 enable: true #是否启用 line_number: true #显示行号 tab_replace:# Category &amp; Tag #分类和标签default_category: uncategorized #默认分类category_map:tag_map:# Archives2: 开启分页1: 禁用分页0: 全部禁用archive: 2category: 2tag: 2# Server #本地服务器port: 4000 #端口号server_ip: localhost #IP 地址logger: falselogger_format: dev# Date / Time format #日期时间格式date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/time_format: H:mm:ss# Pagination #分页per_page: 10 #每页文章数，设置成 0 禁用分页pagination_dir: page# Disqus #Disqus评论，替换为多说disqus_shortname:# Extensions #拓展插件theme: landscape-plus #主题exclude_generator:plugins: #插件，例如生成 RSS 和站点地图的- hexo-generator-feed- hexo-generator-sitemap# Deployment #部署，将 lmintlcx 改成用户名deploy: type: git repo: 刚刚github创库地址.git branch: master 主题详细配置对于主题配置文件多用于个性化设置，不同的主题略有差异，因此大家可以参考各个主题的官方说明进行修改。 绑定个人域名如果你有自己的域名，也可以进行绑定，到时候直接使用你的域名网址打开即可，具体操作流程如下： 购买域名，你可以到阿里云或者其他网站购买一个域名 在DNS中对你购买的域名进行解析，其中记录值为你yourname.github.io对应的IP地址，在cmd中可以进行查看(使用ping命令)，查看方法如下。 在Github上点击该项目对应的setting，并且定位到Github Pages，在如图所示位置填上自己的域名，点击SAVE，同时可看见提示：Your site is published at “你的域名” 在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是limynl.site，只能添加一个哦。 将本地工程部署一下，用你购买的域名打开，就可以看到你的博客了~~ 结语 对于使用Github搭建属于自己的博客，大致过程就是这样。但是文中也许有一些小错误，欢迎大佬们指出~~，当然如果大家从我的博客有所收获，那最好不过。 最后想到了一句话，共勉：大道理很多人都懂，为何脱颖而出的就那么几个人，因为他们不只懂而且也去做了。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
